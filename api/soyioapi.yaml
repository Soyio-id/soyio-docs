openapi: 3.1.0
info:
  title: Soyio API
  description: |-
    API del Servicio de Identidad de Soyio
  contact:
    email: soporte@soyio.id
  version: 1.0.0
servers:
  - url: https://sandbox.soyio.id/api/v1
  - url: https://app.soyio.id/api/v1
tags:
  - name: Disclosure requests
    description: |
      Los disclosure requests representan el proceso en que una compañía solicita datos de una identidad verificada.
  - name: Auth requests
    description: |
      Los auth requests son una forma de autenticar a identidades previamente validadas a través de un `disclosure_request`.
  - name: Consent templates
    description: |
      Los templates de consentimiento te permiten estandarizar la forma en que solicitas datos a tus usuarios.
      Contienen la lista de datos requeridos, sus usos, así como referencias a documentos de privacidad.
  - name: Consent actions
    description: |
      Los consent actions permiten crear acciones de consentimiento.
  - name: Consent commits
    description: |
      Los consent commits permiten crear múltiples acciones de consentimiento.
  - name: Privacy documents
    description: |
      Los documentos de privacidad son archivos que contienen información legal y de privacidad
      que pueden ser referenciados tanto en los `disclosure_templates` como los `consent_templates`.
  - name: Identities
    description: Los objetos de identidad permiten gestionar los datos de identidad de tus usuarios.
  - name: Validation attempts
    description: |
      Los intentos de validación, representan los procesos de validación de identidades de los usuarios. Estos obedecen a una serie de reglas de validación representadas por un template de validación.
  - name: Auth attempts
    description: |
      Los intentos de autenticación representan movimientos de una identidad al intentar autenticarse con tu sistema.

      El tipo de autenticación dependerá del registro del dispositivo de autenticación del usuario. En el caso de que un usuario no tenga su dispositivo de autenticación registrado, el tipo de validación será facial. En ese momento se le pedirá registrar el dispositivo.
  - name: Signature attempts
    description: |
      Representan los intentos de los usuario para firmar ciertos documentos, los cuales dependen del SignatureAttemptTemplate. La firma puede realizarse por medio de llaves de acceso para cuando el usuario haya registrado una, o por medio de video facial cuando el usuario por alguna razón no puede usar la llave de acceso.
  - name: Events
    description: |
      Los eventos nos permiten comunicarte cambios relevantes en el sistema. Cuando ocurre un evento interesante, se crea un objeto evento. Por ejemplo, cuando se valida una identidad, se crea un evento `validation_attempt.succeeded`; cuando una validación falla, se crea un objeto `validation_attempt.failed`.

      > Una llamada a la API **puede generar 1 o más eventos**.


      Los eventos pueden ser enviados directamente a tu servidor a través de la utilización de webhooks.

      ### Guías relacionadas

      - [Webhooks](/docs/api/webhooks)
  - name: Signed documents
    description: |
      Los documentos firmados son documentos digitales que han sido autenticados por los usuarios mediante su firma electrónica. Estos documentos pueden incluir contratos, acuerdos legales, y otros documentos importantes que requieren confirmación de identidad y consentimiento explícito del usuario.

      La firma de estos documentos se gestiona a través del modelo `SignatureAttempt`, que verifica la identidad del usuario y asegura que la firma sea válida y segura.
  - name: Agreements
    description: |
      Los acuerdos (agreements) representan las reglas de compartimiento de datos entre la empresa y un usuario.
      Cada acuerdo puede tener múltiples versiones y evidencias asociadas que respaldan su validez.
  - name: Webhooks
    description: |
      Los webhooks permiten recibir notificaciones en tiempo real cuando ocurren eventos en el sistema.
      Puedes configurar múltiples webhooks y suscribirlos a diferentes tipos de eventos.

      > Cada webhook puede estar suscrito a uno o más tipos de eventos. Por ejemplo, puedes suscribirte a todos los eventos de la identidad, o a todos los eventos de validación.

      :::danger[Atención]
      Si un webhook falla, se intentará enviar nuevamente hasta un máximo de 15 veces. Luego de eso, el webhook se **deshabilitará automáticamente**.
      :::

      ### Guías relacionadas
      - [Webhooks](/docs/api/webhooks)

  - name: Products
    description: |
      Producto o servicio que ofrece una compañía.

paths:
  /consent_templates:
    get:
      tags:
        - Consent templates
      summary: Obtener todos los templates de consentimiento
      operationId: indexConsentTemplates
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Templates de consentimiento encontrados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsentTemplateList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []

    post:
      tags:
        - Consent templates
      summary: Crear un template de consentimiento
      operationId: createConsentTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConsentTemplateInput"
      responses:
        "201":
          description: Template de consentimiento creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsentTemplate"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - api_key: []

  /consent_templates/{id}:
    get:
      tags:
        - Consent templates
      summary: Obtener un template de consentimiento
      operationId: getConsentTemplate
      parameters:
        - name: id
          in: path
          required: true
          description: ID del template de consentimiento
          schema:
            type: string
      responses:
        "200":
          description: Template de consentimiento encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsentTemplate"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      security:
        - api_key: []

    patch:
      tags:
        - Consent templates
      summary: Actualizar un template de consentimiento
      operationId: updateConsentTemplate
      parameters:
        - name: id
          in: path
          required: true
          description: ID del template de consentimiento
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConsentTemplateInput"
      responses:
        "200":
          description: Template de consentimiento actualizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsentTemplate"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - api_key: []

  /privacy_documents:
    get:
      tags:
        - Privacy documents
      summary: Obtener todos los documentos de privacidad
      operationId: indexPrivacyDocuments
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Documentos de privacidad encontrados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrivacyDocumentList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []
    post:
      tags:
        - Privacy documents
      summary: Crea un privacy document
      operationId: createPrivacyDocument
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - template_key
                - file
              properties:
                name:
                  type: string
                  description: Texto que aparecerá en el módulo embebible, al referenciarlo con el `template_key`.
                  example: "términos y condiciones"
                template_key:
                  type: string
                  description: Llave única para referenciar el documento en templates.
                  example: "terms_and_conditions"
                file:
                  type: string
                  format: binary
                  description: Archivo del documento
      responses:
        "201":
          description: Documento de privacidad creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  privacy_document:
                    $ref: "#/components/schemas/PrivacyDocument"
        "400":
          description: Error de solicitud - falta algún campo requerido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      type:
                        type: string
                        example: "invalid_request_error"
                      title:
                        type: string
                        example: "Missing parameter"
                      status:
                        type: integer
                        example: 400
                      detail:
                        type: string
                        example: "The required parameter file is missing"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          description: Error de validación
          content:
            application/json:
              schema:
                type: object
                required:
                  - type
                  - title
                  - status
                  - errors
                properties:
                  type:
                    type: string
                    example: "validation_error"
                  title:
                    type: string
                    example: "Validation error"
                  status:
                    type: integer
                    example: 422
                  errors:
                    type: array
                    items:
                      type: string
                    example:
                      - "Privacy documents is invalid"

  /privacy_documents/{id}:
    get:
      tags:
        - Privacy documents
      summary: Obtener un documento de privacidad específico
      operationId: getPrivacyDocument
      parameters:
        - name: id
          in: path
          description: ID del documento de privacidad
          required: true
          schema:
            type: string
          example: "privdoc_jy21JCGqb-VHhHeUd2nmKw"
      responses:
        "200":
          description: Documento de privacidad encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  privacy_document:
                    $ref: "#/components/schemas/PrivacyDocument"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []

  /disclosure_requests:
    get:
      tags:
        - Disclosure requests
      summary: Obtener todos los disclosure requests
      operationId: indexDisclosureRequests
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            status_filter:
              summary: Filtrar por estado
              value: '{"status":{"=":"pending"}}'
            date_filter:
              summary: Filtrar por fecha de creación
              value: '{"created_at":{">":"2024-01-01"}}'
            combined_filter:
              summary: Filtros combinados
              value: '{"status":{"=":"pending"},"created_at":{">":"2024-01-01"}}'
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Disclosure requests encontrados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisclosureRequestList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []
    post:
      tags:
        - Disclosure requests
      summary: Crear un disclosure request
      operationId: createDisclosureRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - disclosure_template_id
                - user_reference
                - user_email
              properties:
                disclosure_template_id:
                  type: string
                  description: Identificador del disclosure template.
                  example: "dtpl_3D4O4A0CuiVriCnA9RjEhi"
                user_reference:
                  type: string
                  description: Referencia de usuario de tu sistema para el disclosure request.
                  example: "user_123"
                user_email:
                  type: string
                  description: Correo electrónico del usuario para el disclosure request.
                  example: "walter@white.com"
                entity_id:
                  type: string
                  description: Identificador de entidad previamente creada.
                  example: "ent_3D4O4A0CuiVriCnA9RjEhi"
                matchers:
                  type: array
                  description: Matchers del disclosure request. Campo opcional.
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        description: Clave del matcher.
                        example: "cl_carnet_rut"
                        enum:
                          - cl_carnet_rut
                          - name
                          - last_name
                          - date_of_birth
                      value:
                        type: string
                        description: Valor del matcher.
                        example: "12345678-9"
      responses:
        "201":
          description: Disclosure request creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  disclosure_request:
                    $ref: "#/components/schemas/DisclosureRequest"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - api_key: []
  /disclosure_requests/{id}:
    get:
      tags:
        - Disclosure requests
      summary: Obtener un disclosure request específico
      operationId: getDisclosureRequest
      parameters:
        - name: id
          in: path
          description: Identificador único del disclosure request
          required: true
          explode: true
          schema:
            type: string
          example: "dreq_1B2M2Y8AsgTpgAmY7PhCfg"
      responses:
        "200":
          description: Disclosure request encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  disclosure_request:
                    $ref: "#/components/schemas/DisclosureRequest"
        "404":
          $ref: "#/components/responses/NotFoundError"
      security:
        - api_key: []

  /auth_requests:
    post:
      tags:
        - Auth requests
      summary: Crear un request de autenticación
      description: |
        Crea un nuevo request de autenticación para una identidad específica.
        El tipo de autenticación dependerá de si el usuario tiene un dispositivo registrado (passkey_validation)
        o no (facial_validation).
      operationId: createAuthRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identity_id:
                  type: string
                  description: Identificador único de la identidad que realizará el intento de autenticación.
                  example: "id_ma21KLsmaslopask912Aa2"
              required:
                - identity_id
      responses:
        "201":
          description: Request de autenticación creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_attempt:
                    $ref: "#/components/schemas/AuthAttempt"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - api_key: []
    get:
      tags:
        - Auth requests
      summary: Obtener todos los auth requests
      operationId: indexAuthRequests
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            status_filter:
              summary: Filtrar por estado
              value: '{"status":{"=":"awaiting_authentication"}}'
            identity_filter:
              summary: Filtrar por identidad
              value: '{"identity_id":{"=":"id_ma21KLsmaslopask912Aa2"}}'
            combined_filter:
              summary: Filtros combinados
              value: '{"status":{"=":"awaiting_authentication"},"identity_id":{"=":"id_ma21KLsmaslopask912Aa2"}}'
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Auth requests encontrados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthRequestList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []
  /auth_requests/{id}:
    get:
      tags:
        - Auth requests
      summary: Obtener un auth request específico
      operationId: getAuthRequest
      parameters:
        - name: id
          in: path
          description: ID del auth request a buscar
          required: true
          schema:
            type: string
          example: "authreq_Kop19_kEe23i7hSw8QG4-a"
      responses:
        "200":
          description: Auth request encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_request:
                    $ref: "#/components/schemas/AuthRequest"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []
  /identities:
    get:
      tags:
        - Identities
      summary: Obtener todas las identidades
      operationId: indexIdentities
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            email_filter:
              summary: Filtrar por email
              value: '{"email":{"like":"@example.com"}}'
            data_filter:
              summary: Filtrar por datos personales
              value: '{"data":{"name":{"=":"John"}}}'
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Identidades encontradas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []
  /identities/{id}:
    get:
      tags:
        - Identities
      summary: Obtener una identidad específica
      operationId: getIdentity
      parameters:
        - name: id
          in: path
          description: ID de la identidad a buscar
          required: true
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Operación exitosa
          content:
            application/json:
              schema:
                type: object
                properties:
                  identity:
                    $ref: "#/components/schemas/Identity"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []
  /validation_attempts:
    get:
      tags:
        - Validation attempts
      summary: Obtener todos los intentos de validación
      operationId: indexValidationAttempts
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            status_filter:
              summary: Filtrar por estado
              value: '{"status":{"=":"successful"}}'
            date_range:
              summary: Filtrar por rango de fechas
              value: '{"created_at":{">":"2024-01-01","<":"2024-12-31"}}'
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Intentos de validación encontrados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationAttemptList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /validation_attempts/{id}:
    get:
      tags:
        - Validation attempts
      summary: Obtener un flujo de validación específico
      description: Retorna un flujo de validación dado su ID.
      operationId: getValidationAttempt
      parameters:
        - name: id
          in: path
          description: ID del flujo de validación a buscar
          required: true
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Flujo de validación encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  validation_attempt:
                    $ref: "#/components/schemas/ValidationAttempt"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /auth_attempts:
    get:
      tags:
        - Auth attempts
      summary: Obtener todos los intentos de autenticación
      operationId: indexAuthAttempts
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            status_filter:
              summary: Filtrar por estado
              value: '{"status":{"=":"successful"}}'
            type_filter:
              summary: Filtrar por tipo de autenticación
              value: '{"auth_type":{"=":"passkey_validation"}}'
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Intentos de autenticación encontrados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthAttemptList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /auth_attempts/{id}:
    get:
      tags:
        - Auth attempts
      summary: Obtener un intento de autenticación específico
      description: Retorna un intento de autenticación dado su ID.
      operationId: getAuthAttempt
      parameters:
        - name: id
          in: path
          description: ID del intento de autenticación a buscar
          required: true
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Intento de autenticación encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_attempt:
                    $ref: "#/components/schemas/AuthAttempt"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /signature_attempts:
    post:
      tags:
        - Signature attempts
      summary: Crear un intento de firma
      description: |
        Crea un nuevo intento de firma para un documento basado en un template específico.
        Se deben proporcionar variables clave-valor dinámicas necesarias para el proceso de firma.
      operationId: createSignatureAttempt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identity_id:
                  type: string
                  description: Identificador único de la identidad que realiza el intento de firma.
                  example: "id_ma21KLsmaslopask912Aa2"
                template_id:
                  type: string
                  description: Identificador del template de firma a utilizar.
                  example: "st_9F42D8L0JQ7p82H"
                variables:
                  type: array
                  description: Array de pares clave-valor que serán utilizados en el documento a firmar.
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        description: Nombre de la variable que se utilizará en el template de firma.
                      value:
                        type: string
                        description: Valor asociado a la clave especificada.
                  examples:
                    [
                      [
                        {
                          key: "first_variable_key",
                          value: "first_variable_value",
                        },
                        {
                          key: "second_variable_key",
                          value: "second_variable_value",
                        },
                      ],
                    ]
              required:
                - identity_id
                - template_id
                - variables
      responses:
        "201":
          description: Intento de firma creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature_attempt:
                    $ref: "#/components/schemas/SignatureAttempt"
        "400":
          description: Datos de entrada inválidos, ya sea porque faltan variables, o se entregaron variables extra.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    description: Lista de mensajes de error describiendo los problemas con la solicitud.
                    items:
                      type: array
                      items:
                        type: string
                    examples:
                      [
                        [
                          "Missing key: <missing_example_key>",
                          "Missing key: <another_missing_example_key>",
                          "Key <extra_key> does not exist in the signature template",
                        ],
                      ]
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []
    get:
      tags:
        - Signature attempts
      summary: Obtener todos los intentos de firma
      operationId: indexSignatureAttempts
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            status_filter:
              summary: Filtrar por estado
              value: '{"status":{"=":"successful"}}'
            identity_filter:
              summary: Filtrar por identidad
              value: '{"identity_id":{"=":"id_ma21KLsmaslopask912Aa2"}}'
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Intentos de firma encontrados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignatureAttemptList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /signature_attempts/{id}:
    get:
      tags:
        - Signature attempts
      summary: Obtener un intento de firma específico
      description: Retorna un intento de firma dado su ID.
      operationId: getSignatureAttempt
      parameters:
        - name: id
          in: path
          description: ID del intento de firma a buscar
          required: true
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Intento de firma encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature_attempt:
                    $ref: "#/components/schemas/SignatureAttempt"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /events:
    get:
      tags:
        - Events
      summary: Obtener todos los eventos
      operationId: indexEvents
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            event_name:
              summary: Filtrar por nombre del evento
              value: '{"name":{"=":"disclosure_request.granted"}}'
            date_range:
              summary: Filtrar por rango de fechas
              value: '{"created_at":{">":"2024-01-01","<":"2024-12-31"}}'
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Eventos encontrados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /events/{id}:
    get:
      tags:
        - Events
      summary: Obtener un evento específico
      description: Obtiene los detalles de un evento existente.
      operationId: getEvent
      parameters:
        - name: id
          in: path
          description: ID del evento a buscar
          required: true
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Evento encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: "#/components/schemas/Event"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /events/{id}/broadcast:
    post:
      tags:
        - Events
      summary: Reenviar un evento a los webhooks suscritos
      description: |
        Permite reenviar manualmente un evento a todos los webhooks suscritos de la compañía.
        Este endpoint es útil cuando necesitas retransmitir un evento específico, por ejemplo,
        si hubo problemas en la recepción original del webhook.
      operationId: broadcastEvent
      parameters:
        - name: id
          in: path
          description: Id del evento
          required: true
          schema:
            type: string
          example: "evt_jy21JCGqb-VHhHeUd2nmKw"
      responses:
        "204":
          description: El evento fue enviado exitosamente a la cola de webhooks
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      security:
        - api_key: []
  /signed_documents:
    get:
      tags:
        - Signed documents
      summary: Obtener todos los documentos firmados.
      description: Retorna una lista de documentos firmados. Los documentos se encuentran ordenados por defecto por la fecha de creación, donde los más recientes aparecerán primero.
      operationId: indexSignedDocuments
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            identity_filter:
              summary: Filtrar por identidad
              value: '{"identity_id":{"=":"id_ma21KLsmaslopask912Aa2"}}'
            date_filter:
              summary: Filtrar por fecha de firma
              value: '{"created_at":{">":"2024-01-01"}}'
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Documentos firmados encontrados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignedDocumentList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /signed_documents/{id}:
    get:
      tags:
        - Signed documents
      summary: Obtener un documento firmado.
      description: Obtiene los detalles de un documento firmado.
      operationId: getSignedDocument
      parameters:
        - name: id
          in: path
          description: ID del documento firmado
          required: true
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: Document firmado encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: "#/components/schemas/SignedDocument"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /agreements:
    get:
      tags:
        - Agreements
      summary: Obtener todos los acuerdos
      description: Retorna la lista de todos los acuerdos en su última versión.
      operationId: indexAgreements
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            user_reference_filter:
              summary: Filtrar por `user_reference`
              value: '{"user_reference":{"=":"user_123"}}'
            entity_filter:
              summary: Filtrar por entidad
              value: '{"entity_id":{"=":"ent_cYTjMLgWE3MvUa3RKwgXEg"}}'
            identity_filter:
              summary: Filtrar por identidad
              value: '{"identity_id":{"=":"id_ma21KLsmaslopask912Aa2"}}'
            data_use_filter:
              summary: |
                Filtrar por finalidad del dato. Retorna los agreements que incluyen al menos uno de los valores proporcionados.
                Si se proporciona una categoría general (e.g. `essential`), se incluyen los casos más específicos (e.g. `essential.service`).
              value: '{"data_uses":{"in":["analytics", "marketing"]}}'
            data_category:
              summary: |
                Filtrar por categoría del dato. Retorna los agreements que incluyen al menos uno de los valores proporcionados.
                Si se proporciona una categoría general (e.g. `user.name`), se incluyen los casos más específicos (e.g. `user.name.first`).
              value: '{"data_categories":{"in":["user.name", "user.contact.email"]}}'
            date_filter:
              summary: Filtrar por fecha de creación
              value: '{"created_at":{">":"2024-01-01"}}'
            combined_filter:
              summary: Filtros combinados
              value: '{"status":{"=":"active"},"created_at":{">":"2024-01-01"}}'
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Acuerdos encontrados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgreementList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []
  /agreements/{id}:
    get:
      tags:
        - Agreements
      summary: Obtener un acuerdo específico
      description: Retorna los detalles de un acuerdo en su última versión.
      operationId: getAgreement
      parameters:
        - name: id
          in: path
          description: ID del acuerdo a buscar
          required: true
          schema:
            type: string
          example: "agr_1B2M2Y8AsgTpgAmY7PhCfg"
      responses:
        "200":
          description: Acuerdo encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  agreement:
                    $ref: "#/components/schemas/AgreementDetail"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []

  /agreements/{id}/evidences:
    get:
      tags:
        - Agreements
      summary: Obtener todas las evidencias de un acuerdo
      description: Retorna la lista de evidencias asociadas a un acuerdo específico.
      operationId: getAgreementEvidences
      parameters:
        - name: id
          in: path
          description: ID del acuerdo
          required: true
          schema:
            type: string
          example: "agr_1B2M2Y8AsgTpgAmY7PhCfg"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Evidencias encontradas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvidenceList"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []

  /agreements/{id}/evidences/{evidenceId}:
    get:
      tags:
        - Agreements
      summary: Obtener una evidencia específica de un acuerdo
      description: Retorna los detalles de una evidencia específica asociada a un acuerdo.
      operationId: getAgreementEvidence
      parameters:
        - name: id
          in: path
          description: ID del acuerdo
          required: true
          schema:
            type: string
          example: "agr_1B2M2Y8AsgTpgAmY7PhCfg"
        - name: evidenceId
          in: path
          description: ID de la evidencia
          required: true
          schema:
            type: string
          example: "ev_2C3N3Z9BthUqhBnZ8QiDgj"
      responses:
        "200":
          description: Evidencia encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  evidence:
                    $ref: "#/components/schemas/Evidence"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []

  /agreements/{id}/versions:
    get:
      tags:
        - Agreements
      summary: Obtener todas las versiones de un acuerdo
      description: Retorna la lista de versiones asociadas a un acuerdo específico.
      operationId: getAgreementVersions
      parameters:
        - name: id
          in: path
          description: ID del acuerdo
          required: true
          schema:
            type: string
          example: "agr_1B2M2Y8AsgTpgAmY7PhCfg"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Versiones encontradas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgreementList"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []

  /agreements/{id}/versions/{versionNumber}:
    get:
      tags:
        - Agreements
      summary: Obtener una versión específica de un acuerdo
      description: Retorna los detalles de una versión específica de un acuerdo.
      operationId: getAgreementVersion
      parameters:
        - name: id
          in: path
          description: ID del acuerdo
          required: true
          schema:
            type: string
          example: "agr_1B2M2Y8AsgTpgAmY7PhCfg"
        - name: versionNumber
          in: path
          description: Número de versión
          required: true
          schema:
            type: string
          example: "1"
      responses:
        "200":
          description: Versión encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: "#/components/schemas/AgreementBase"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []

  /agreements/{id}/versions/{versionNumber}/evidence:
    get:
      tags:
        - Agreements
      summary: Obtener la evidencia de una versión específica
      description: Retorna la evidencia asociada a una versión específica de un acuerdo.
      operationId: getAgreementVersionEvidence
      parameters:
        - name: id
          in: path
          description: ID del acuerdo
          required: true
          schema:
            type: string
          example: "agr_1B2M2Y8AsgTpgAmY7PhCfg"
        - name: versionNumber
          in: path
          description: Número de versión
          required: true
          schema:
            type: string
          example: "1"
      responses:
        "200":
          description: Evidencia encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  evidence:
                    $ref: "#/components/schemas/Evidence"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []

  /consent_actions:
    post:
      tags:
        - Consent actions
      summary: Crear un consent action
      operationId: createConsentAction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action_token
              properties:
                action_token:
                  type: string
                  description: Token JWT de la acción de consentimiento
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                user_reference:
                  type: string
                  description: Referencia del usuario
                  example: "1234567890"
                entity_id:
                  type: string
                  description: ID de la entidad. Si no se proporciona, se creará una nueva entidad.
                  example: "ent_1234567890"
      responses:
        "201":
          description: Consent action creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConsentAction"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []
    get:
      tags:
        - Consent actions
      summary: Listar consent actions
      operationId: indexConsentActions
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - $ref: "#/components/parameters/OrderByParam"
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            entity_filter:
              summary: Filtrar por entidad
              value: '{"entity_id":{"=":"ent_cYTjMLgWE3MvUa3RKwgXEg"}}'
            consent_template_filter:
              summary: Filtrar por template de consentimiento
              value: '{"consent_template_id":{"=":"ctmpl_cYTjMLgWE3MvUa3RKwgXEg"}}'
      responses:
        "200":
          description: Lista de consent actions
          content:
            application/json:
              schema:
                type: object
                properties:
                  consent_actions:
                    type: array
                    items:
                      $ref: "#/components/schemas/ConsentAction"
                  metadata:
                    $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []

  /consent_actions/{id}:
    get:
      tags:
        - Consent actions
      summary: Obtener un consent action
      operationId: showConsentAction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id del consent action
          example: "consact_1B2M2Y8AsgTpgAmY7PhCfg"
      responses:
        "200":
          description: Consent action encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  consent_action:
                    $ref: "#/components/schemas/ConsentAction"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      security:
        - api_key: []

  /consent_commits:
    get:
      tags:
        - Consent commits
      summary: Listar commits de consentimiento
      operationId: indexConsentCommits
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
          description: Número de página
          example: 1
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
          description: Elementos por página
          example: 20
        - name: order_by
          in: query
          required: false
          schema:
            type: string
          description: Campo y dirección de ordenamiento
          example: "created_at DESC"
      responses:
        "200":
          description: Lista de consent commits
          content:
            application/json:
              schema:
                type: object
                properties:
                  consent_commits:
                    type: array
                    items:
                      $ref: "#/components/schemas/ConsentCommit"
                  metadata:
                    $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []

    post:
      tags:
        - Consent commits
      summary: Crear un commit de consentimiento
      description: |
        Crea un nuevo commit de consentimiento basado en los actions tokens. Cada action token
        representa una checkbox de consentimiento específico que el usuario ha marcado a través de nuestro módulo de consentimiento.
      operationId: createConsentCommit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - consent_actions
              properties:
                user_reference:
                  type: string
                  description: Referencia para identificar al usuario en tu sistema
                  example: "user_123"
                consent_actions:
                  type: array
                  description: Array de tokens que representan las acciones de consentimiento realizadas por el usuario
                  items:
                    type: object
                    properties:
                      action_token:
                        type: string
                        description: Token JWT de la acción de consentimiento
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zZW50X2lkIjoiY3RwbF8xMjM0NTY3ODkwIiwiZW50aXR5X2lkIjoiZW50XzVGNlE2QzJFd2tYdGtFcEIxVGxHamsiLCJpYXQiOjE1MTYyMzkwMjJ9.4p3gYtKmXkHWDyEA9L4ywJRBpVFWxG7pdq8LHbJhxvE"
                  example:
                    [
                      {
                        "action_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zZW50X2lkIjoiY3RwbF8xMjM0NTY3ODkwIiwiZW50aXR5X2lkIjoiZW50XzVGNlE2QzJFd2tYdGtFcEIxVGxHamsiLCJpYXQiOjE1MTYyMzkwMjJ9.4p3gYtKmXkHWDyEA9L4ywJRBpVFWxG7pdq8LHbJhxvE",
                      },
                      {
                        "action_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zZW50X2lkIjoiY3RwbF85ODc2NTQzMjEwIiwiZW50aXR5X2lkIjoiZW50XzVGNlE2QzJFd2tYdGtFcEIxVGxHamsiLCJpYXQiOjE1MTYyMzkwMjJ9.8vkoM1VO5Kp6Udz9ISFnU7YD7HcGYt9yCUuZGrYPe2s",
                      },
                    ]
                entity_id:
                  type: string
                  description: Identificador opcional de la entidad asociada a este consentimiento
                  example: "ent_5F6Q6C2EwkXtkEpB1TlGjk"
      responses:
        "201":
          description: Commit de consentimiento creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  consent_commit:
                    $ref: "#/components/schemas/ConsentCommit"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - api_key: []

  /consent_commits/{id}:
    get:
      tags:
        - Consent commits
      summary: Obtener un commit de consentimiento
      operationId: showConsentCommit
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id del commit de consentimiento
          example: "ccom_1B2M2Y8AsgTpgAmY7PhCfg"
      responses:
        "200":
          description: Commit de consentimiento encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  consent_commit:
                    $ref: "#/components/schemas/ConsentCommit"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      security:
        - api_key: []

  /webhooks:
    get:
      tags:
        - Webhooks
      summary: Obtener todos los webhooks
      operationId: indexWebhooks
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Webhooks encontrados
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []

    post:
      tags:
        - Webhooks
      summary: Crear un webhook
      operationId: createWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookInput"
      responses:
        "201":
          description: Webhook creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhook:
                    $ref: "#/components/schemas/Webhook"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - api_key: []

  /webhooks/{id}:
    get:
      tags:
        - Webhooks
      summary: Obtener un webhook específico
      operationId: getWebhook
      parameters:
        - name: id
          in: path
          description: Id del webhook
          required: true
          schema:
            type: string
          example: "wh_1B2M2Y8AsgTpgAmY7PhCfg"
      responses:
        "200":
          description: Webhook encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhook:
                    $ref: "#/components/schemas/Webhook"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      security:
        - api_key: []

    patch:
      tags:
        - Webhooks
      summary: Actualizar un webhook
      operationId: updateWebhook
      parameters:
        - name: id
          in: path
          description: Id del webhook
          required: true
          schema:
            type: string
          example: "wh_1B2M2Y8AsgTpgAmY7PhCfg"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookInput"
      responses:
        "200":
          description: Webhook actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhook:
                    $ref: "#/components/schemas/Webhook"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - api_key: []

    delete:
      tags:
        - Webhooks
      summary: Eliminar un webhook
      operationId: deleteWebhook
      parameters:
        - name: id
          in: path
          description: Id del webhook
          required: true
          schema:
            type: string
          example: "wh_1B2M2Y8AsgTpgAmY7PhCfg"
      responses:
        "204":
          description: Webhook eliminado exitosamente
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      security:
        - api_key: []

  /products:
    get:
      tags:
        - Products
      summary: Obtener todos los productos
      operationId: indexProducts
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PerPageParam"
        - $ref: "#/components/parameters/OrderByParam"
      responses:
        "200":
          description: Productos encontrados
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  metadata:
                    $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - api_key: []

    post:
      tags:
        - Products
      summary: Crear un producto
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del producto. Se recomienda darle un identificador con un formato que facilite su identificación.
                  example: "my_product_123"
      responses:
        "201":
          description: Producto creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
      security:
        - api_key: []

  /products/{id}:
    get:
      tags:
        - Products
      summary: Obtener un producto específico
      operationId: getProduct
      parameters:
        - name: id
          in: path
          description: Id del producto
          required: true
          schema:
            type: string
          example: "prod_1B2M2Y8AsgTpgAmY7PhCfg"
      responses:
        "200":
          description: Producto encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
      security:
        - api_key: []

components:
  schemas:
    FilterOrderAndPaginationMetadata:
      type: object
      properties:
        page:
          type: integer
          description: Página actual
          example: 1
        per_page:
          type: integer
          description: Entradas por página
          example: 20
        total:
          type: integer
          description: Total de entradas
          example: 45
        order_by:
          type: string
          description: Orden de los resultados (ej. "created_at DESC")
          example: "created_at DESC"
        filters:
          type: object
          description: Filtros aplicados a la consulta
          example: { "status": { "=": "pending" } }

    ConsentTemplateInput:
      type: object
      required:
        - name
        - title
        - text
        - availability_period_in_months
        - data_requirements
      properties:
        name:
          type: string
          description: Nombre del template
          example: Mi template de consentimiento
        availability_period_in_months:
          type: integer
          description: Período de disponibilidad en meses. Esto determina por cuánto tiempo puedes solicitar los datos del usuario desde que te dio su consentimiento.
          example: 12
        title:
          type: string
          description: Titulo que aparecerá en el checkbox del módulo de consentimiento
          example: "Consentimiento general"
        text:
          type: string
          description: |
            Texto del template de consentimiento. Permite referenciar [documentos de privacidad](/docs/api/resources/schemas/privacydocument).
          example: "De acuerdo a los {{ terms_and_conditions }} y {{ privacy_policy }} de Soyio."
        product_id:
          type: string
          description: |
            Identificador del [producto](/docs/api/resources/schemas/product) al que está asociado el `consent_template`. Al definir un `product_id`, quedará registro de que el consentimiento de los datos se ha realizado para dicho producto.
          example: "my_product_123"
        manage_consent_url:
          type: string
          description: |
            URL que permite al usuario administrar sus preferencias de consentimiento.
            Cuando se monta el `ConsentBox` asociado a una `entity_id` de un `ConsentAction`, la interfaz mostrará automáticamente un botón. Este botón redirige a la URL especificada en `manage_consent_url`. Puedes ver un ejemplo [aquí](/docs/integration-guide/modules/consent#ejemplo).
          example: "https://company.com/manage-consent"
        data_requirements:
          type: array
          description: Lista de requerimientos de datos
          items:
            $ref: "#/components/schemas/DataRequirementInput"

    ConsentTemplate:
      description: |
        Una _consent template_ (template de consentimiento) es una configuración necesaria para el módulo de [_consent_](/docs/integration-guide/modules/consent).

      x-tags:
        - Consent templates
      type: object
      required:
        - id
        - name
        - title
        - text
        - availability_period_in_months
        - data_requirements
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: Identificador único. Debe empezar con `constpl_`
          example: "constpl_wAspvmEr4ACDZaPUtfwjsA"
        name:
          type: string
          description: Nombre descriptivo de la template
          example: Consentimiento básico
        availability_period_in_months:
          type: integer
          description: Periodo de retención de datos en meses
          minimum: 1
          maximum: 120
          example: 12
        title:
          type: string
          description: Titulo que aparecerá en el checkbox del módulo de consentimiento
          example: "Consentimiento general"
        text:
          type: string
          description: |
            Texto del consentimiento. Permite referenciar [documentos de privacidad](/docs/api/resources/schemas/privacydocument).
          example: "De acuerdo a los {{ terms_and_conditions }} y {{ privacy_policy }} de Soyio."
        product_id:
          type: string
          description: |
            Identificador del [producto](/docs/api/resources/schemas/product) al que está asociado el `consent_template`. Al definir un `product_id`, quedará registro de que el consentimiento de los datos se ha realizado para dicho producto.
          example: "my_product_123"
        manage_consent_url:
          type: string
          description: |
            URL que permite al usuario administrar sus preferencias de consentimiento.
            Cuando se monta el `ConsentBox` asociado a una `entity_id` de un `ConsentAction`, la interfaz mostrará automáticamente un botón. Este botón redirige a la URL especificada en `manage_consent_url`. Puedes ver un ejemplo [aquí](/docs/integration-guide/modules/consent#ejemplo).
          example: "https://company.com/manage-consent"
        data_requirements:
          type: array
          description: Lista de requerimientos de datos con información adicional. Ver [recurso](/docs/api/resources/schemas/datarequirement) para más información.
          minItems: 1
          items:
            $ref: "#/components/schemas/DataRequirement"
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación del template de consentimiento
          example: "2024-03-20T15:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Fecha y hora de la última actualización del template de consentimiento
          example: "2024-03-20T15:30:00Z"

    ConsentTemplateList:
      type: object
      properties:
        consent_templates:
          type: array
          items:
            $ref: "#/components/schemas/ConsentTemplate"
        metadata:
          $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"

    DataRequirementInput:
      type: object
      required:
        - key
        - data_uses
      properties:
        key:
          type: string
          description: Clave del dato. Es un texto libre que identifica específicamente el dato involucrado en el consentimiento.
          example: first_name
        data_category:
          type: string
          description: |
            Categoría del dato personal. Debe seguir la [taxonomía de categorías de datos](/docs/integration-guide/concepts/agreement/#taxonomía).

            Las siguientes llaves (`key`) infieren la categoría del dato personal:

            --------------------

              - `name`: Primer nombre (**Name > First**)
              - `last_name`: Apellido (**Name > Last**)
              - `date_of_birth`: Fecha de nacimiento (**Demographic > Birth date**)
              - `cl_carnet_rut`: RUT (**Government Id > National Identification Number**)
              - `cl_carnet_doc_number`: Número de documento (**Government Id**)
              - `cl_carnet_expiration_date`: Fecha de expiración del documento (**Government Id**)
              - `cl_carnet_issue_date`: Fecha de emisión del documento (**Government Id**)
              - `gender`: Género (**Demographic > Gender**)
              - `nationality`: Nacionalidad (**Demographic**)
              - `email`: Correo electrónico (**Contact > Email**)
              - `phone_number`: Teléfono (**Contact > Phone number**)

            --------------------

            Esto significa que si se utiliza alguna de estas llaves, no es necesario especificar la categoría del dato.

            Si se especifica una de estas llaves y además se especifica la categoría del dato, la categoría dada tendrá prioridad sobre la predefinida.
          example: "user.name.first"
        data_uses:
          type: array
          description: Lista de usos permitidos para el dato, parte de la taxonomía de usos de datos
          items:
            type: string

    DataRequirement:
      type: object
      x-tags:
        - Consent templates
      properties:
        key:
          type: string
          description: Clave del dato. Es un texto libre que identifica específicamente el dato involucrado en el consentimiento.
          example: first_name
        data_category:
          type: string
          description: Categoría del dato según Fideslang. Ver [taxonomía](/docs/integration-guide/concepts/taxonomy-and-data-management)
          example: "user.name.first"
        data_uses:
          type: array
          description: Lista de finalidades de tratamiento según Fideslang. Ver [taxonomía](/docs/integration-guide/concepts/taxonomy-and-data-management)
          items:
            type: string

    DisclosureRequestList:
      type: object
      properties:
        disclosure_requests:
          type: array
          items:
            $ref: "#/components/schemas/DisclosureRequest"
        metadata:
          $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"

    IdentityList:
      type: object
      properties:
        identities:
          type: array
          items:
            $ref: "#/components/schemas/Identity"
        metadata:
          $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"

    ValidationAttemptList:
      type: object
      properties:
        validation_attempts:
          type: array
          items:
            $ref: "#/components/schemas/ValidationAttempt"
        metadata:
          $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"

    AuthAttemptList:
      type: object
      properties:
        auth_attempts:
          type: array
          items:
            $ref: "#/components/schemas/AuthAttempt"
        metadata:
          $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"

    SignatureAttemptList:
      type: object
      properties:
        signature_attempts:
          type: array
          items:
            $ref: "#/components/schemas/SignatureAttempt"
        metadata:
          $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"

    EventList:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        metadata:
          $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"

    SignedDocumentList:
      type: object
      properties:
        signed_documents:
          type: array
          items:
            $ref: "#/components/schemas/SignedDocument"
        metadata:
          $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"

    DisclosureRequest:
      description: |
        Representa una solicitud de divulgación de datos en el sistema. Este proceso integral incluye:
        - Verificación de identidad del usuario
        - Registro del consentimiento
        - Revelación de datos hacia la empresa solicitante

        El proceso comienza con la entrega de consentimiento, donde el usuario verá los datos solicitados y deberá confirmar
        su consentimiento. Luego, verificará su identidad y al completar este paso, se creará una identidad con los datos
        verificados.

        ### Guias relacionadas
        - [Revelación de datos y consentimiento](/docs/integration-guide/modules/disclosure)
        - [Verificación de identidad](/docs/integration-guide/concepts/verification)

      x-tags:
        - Disclosure requests
      type: object
      properties:
        id:
          type: string
          description: Identificador único del disclosure request.
          example: "dreq_1B2M2Y8AsgTpgAmY7PhCfg"
        disclosure_template_id:
          type: string
          description: Identificador del template de divulgación.
          example: "dtpl_3D4O4A0CuiVriCnA9RjEhi"
        identity_id:
          type: string
          description: Identificador únicode la identidad.
          example: "id_ma21KLsmaslopask912Aa2"
        status:
          type: string
          description: Estado de la solicitud de divulgación.
          enum:
            - pending
            - authenticating
            - validating
            - awaiting_permissions
            - awaiting_missing_data
            - timed_out
            - granted
          example: "pending"
        matchers:
          type: array
          description: Matchers de la solicitud de divulgación.
          items:
            type: object
            properties:
              key:
                type: string
                description: Clave del matcher.
                example: "cl_carnet_rut"
              value:
                type: string
                description: Valor del matcher.
                example: "12345678-9"
        sdk:
          type: string
          description: SDK utilizado para iniciar la solicitud.
          example: "web"
        user_reference:
          type: string
          description: Referencia de usuario de tu sistema para el disclosure request.
          example: "user_123"
        identity_email:
          type: string
          description: Correo electrónico proveído por el comercio a la hora de crear la solicitud de divulgación.
          example: "walter@white.com"
        created_at:
          type: string
          format: date-time
          description: Fecha y hora en que se creó el disclosure request.
          example: "2024-03-20T15:30:00Z"
    AuthRequest:
      x-tags:
        - Auth requests
      type: object
      description: |
        Los auth requests son una forma de autenticar a identidades previamente validadas a través de un `disclosure_request`.

        ### Guias relacionadas
        - [Conceptos Generales](/docs/integration-guide/concepts/general-concepts)
      properties:
        id:
          type: string
          description: Identificador único del request de autenticación.
          example: "authreq_Kop19_kEe23i7hSw8QG4-a"
        identity_id:
          type: string
          description: Identificador de la identidad que realiza el intento.
          example: "id_ma21KLsmaslopask912Aa2"
        status:
          type: string
          enum:
            - awaiting_authentication
            - successful
            - timed_out
          description: Estado actual del request de autenticación.
        user_reference:
          type: string
          description: Referencia de usuario de tu sistema para el request de autenticación.
          example: "user_123"
        created_at:
          type: string
          format: date-time
          description: Fecha y hora en que se creó el registro del intento de autenticación.
    AuthRequestList:
      type: object
      properties:
        auth_requests:
          type: array
          items:
            $ref: "#/components/schemas/AuthRequest"
        metadata:
          $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"
    IdentityInformation:
      type: object
      description: Información detallada de un atributo específico de una identidad.
      properties:
        key:
          type: string
          description: Clave o nombre del atributo de la identidad.
          example: "name"
        value:
          type: string
          description: Valor asociado a la clave del atributo.
          example: "Jon"
      xml:
        name: tag
    Identity:
      x-tags:
        - Identities
      type: object
      description: |
        Los objetos de identidad permiten gestionar los datos de identidad de tus usuarios.
        Una identidad representa a un usuario verificado en el sistema y contiene toda la información
        validada sobre esa persona.

        ### Guias relacionadas
        - [Conceptos Generales](/docs/integration-guide/concepts/general-concepts)
      properties:
        id:
          type: string
          description: Identificador único de la identidad.
          example: "id_ma21KLsmaslopask912Aa2"
        email:
          type: string
          description: Correo electrónico asociado a la identidad.
          example: "jonsnow@nightswatch.com"
        data:
          type: array
          description: Colección de información adicional sobre la identidad en forma de pares clave-valor.
          items:
            $ref: "#/components/schemas/IdentityInformation"
        signed_documents:
          type: array
          description: Lista de todos los `ids` de los documentos firmados por la identidad.
          items:
            type: string
            description: Identificador único del documento firmado.
            example: "sd_1B2M2Y8AsgTpgAmY7PhCfg"

    AuthAttempt:
      x-tags:
        - Auth attempts
      type: object
      description: |
        Los intentos de autenticación representan movimientos de una identidad al intentar autenticarse con tu sistema.

        El tipo de autenticación dependerá del registro del dispositivo de autenticación del usuario. En el caso de que un usuario
        no tenga su dispositivo de autenticación registrado, el tipo de validación será facial. En ese momento se le pedirá
        registrar el dispositivo.

        **Guias relacionadas**:
        - [Autenticación de usuarios](/docs/integration-guide/modules/authentication)
        - [Verificación de identidad](/docs/integration-guide/concepts/verification)
      properties:
        id:
          type: string
          description: Identificador único del intento de autenticación.
          example: "aa_Kop19_kEe23i7hSw8QG4-a"
        identity_id:
          type: string
          description: Identificador de la identidad que realiza el intento.
          example: "id_ma21KLsmaslopask912Aa2"
        status:
          type: string
          enum:
            - awaiting_authentication
            - authenticating_by_video
            - failed
            - successful
          description: Estado actual del intento de autenticación (por ejemplo, "exitoso", "fallido").
        user_reference:
          type: string
          description: Referencia de usuario de tu sistema para el intento de autenticación.
          example: "user_123"
        kind:
          type: string
          enum:
            - facial_validation
            - passkey_validation
          description: Tipo de validación utilizada en el intento de autenticación. `passkey_validation` corresponde a cuando un usuario validó a través de un dispositivo registrado.
        error_reason:
          type:
            - "null"
            - string
          description: Razón del error en caso de que el intento haya fallado. Campo opcional.
        created_at:
          type: string
          format: date-time
          description: Fecha y hora en que se creó el registro del intento de autenticación.
    SignatureAttempt:
      x-tags:
        - Signature attempts
      type: object
      description: |
        Representan los intentos de los usuarios para firmar ciertos documentos, los cuales dependen del SignatureAttemptTemplate.
        La firma puede realizarse por medio de llaves de acceso para cuando el usuario haya registrado una, o por medio de video
        facial cuando el usuario por alguna razón no puede usar la llave de acceso.

        ### Guias relacionadas
        - [Solicitudes de firma de documentos](/docs/integration-guide/modules/signature)
        - [Firma de documentos](/docs/integration-guide/concepts/signature)
      properties:
        id:
          type: string
          description: Identificador único del intento de firma.
          example: "sa_1B2M2Y8AsgTpgAmY7PhCfg"
        identity_id:
          type: string
          description: Identificador de la identidad que realiza el intento.
          example: "id_ma21KLsmaslopask912Aa2"
        status:
          type: string
          enum:
            - awaiting_authentication
            - authenticating_by_video
            - authentication_failed
            - successful
          description: Estado actual del intento de firma.
        user_reference:
          type: string
          description: Referencia de usuario de tu sistema para el intento de firma.
          example: "user_123"
        auth_type:
          type: string
          enum:
            - passkey_validation
            - facial_validation
          description: Tipo de autenticación utilizada en el intento de firma. `passkey_validation` corresponde a cuando un usuario validó a través de una llave de acceso.
        created_at:
          type: string
          format: date-time
          description: Fecha y hora en que se creó el registro del intento de autenticación.
    ValidationAttempt:
      x-tags:
        - Validation attempts
      type: object
      description: |
        Los intentos de validación representan los procesos de validación de identidades de los usuarios.
        Estos obedecen a una serie de reglas de validación representadas por un template de validación.

        ### Guias relacionadas
        - [Revelación de datos y consentimiento](/docs/integration-guide/modules/disclosure)
        - [Verificación de identidad](/docs/integration-guide/concepts/verification)
      properties:
        id:
          type: string
          description: Identificador único del flujo de validación.
          example: "va_1B2M2Y8AsgTpgAmY7PhCfg"
        identity_email:
          type: string
          description: Correo electrónico de la identidad asociada al flujo.
          example: "gus@polloshermanos.com"
        status:
          type: string
          enum:
            - pending
            - in_progress
            - successful
            - failed
          description: Estado actual del flujo de validación.
        user_reference:
          type:
            - string
            - "null"
          description: Referencia de usuario de tu sistema para el flujo de validación.
          example: "user_123"
        error_reason:
          type:
            - "null"
            - string
          enum:
            - unknown_error
            - document_validation_error
            - facial_validation_error
            - expiration_error
          description: Motivo del error, si el flujo no fue exitoso. Campo opcional.
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación del flujo de validación.

    ConsentCommit:
      x-tags:
        - Consent commits
      type: object
      description: Agrupa una serie de acciones de consentimiento realizadas por un usuario
      properties:
        id:
          type: string
          description: Identificador único del consent commit
          example: "ccom_1B2M2Y8AsgTpgAmY7PhCfg"
        user_reference:
          type: string
          description: Referencia del usuario en el sistema del cliente
          example: "user_123"
        entity_id:
          type: string
          description: Identificador de la entidad asociada
          example: "ent_1B2M2Y8AsgTpgAmY7PhCfg"
        consent_actions:
          type: array
          description: Acciones de consentimiento asociadas al commit
          items:
            $ref: "#/components/schemas/ConsentAction"
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación del consent commit
          example: "2024-03-20T15:30:00Z"

    ConsentAction:
      x-tags:
        - Consent actions
      type: object
      description: Representa una acción de consentimiento realizada por un usuario
      properties:
        id:
          type: string
          description: Identificador único de la acción de consentimiento
          example: "consact_1B2M2Y8AsgTpgAmY7PhCfg"
        entity_id:
          type: string
          description: Identificador de la entidad asociada. Puede ser nulo.
          example: "ent_5F6Q6C2EwkXtkEpB1TlGjk"
          nullable: true
        user_reference:
          type: string
          description: Referencia del usuario en el sistema del cliente
          example: "user_123"
        consent_template_id:
          type: string
          description: Identificador del template de consentimiento asociado.
          example: "ctmpl_1B2M2Y8AsgTpgAmY7PhCfg"
        context:
          type: string
          description: Contexto adicional asociado a la acción de consentimiento
          example: "web_signup"
          nullable: true
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación de la acción de consentimiento
          example: "2024-03-20T15:30:00Z"
    Event:
      x-tags:
        - Events
      type: object
      description: |
        Los eventos nos permiten comunicarte cambios relevantes en el sistema. Cuando ocurre un evento interesante,
        se crea un objeto evento. Por ejemplo, cuando se valida una identidad, se crea un evento `validation_attempt.succeeded`;
        cuando una validación falla, se crea un objeto `validation_attempt.failed`.

        :::info
        Una llamada a la API **puede generar 1 o más eventos**.
        :::

        Los eventos pueden ser enviados directamente a tu servidor a través de la utilización de webhooks.

        ### Guias relacionadas
        - [Webhooks](/docs/api/webhooks)
      properties:
        id:
          type: string
          description: Identificador único del evento.
          example: "evt_1B2M2Y8AsgTpgAmY7PhCfg"
        name:
          type: string
          description: Nombre descriptivo del evento.
          example: "disclosure_request.granted"
        payload:
          type: object
          description: Datos adicionales asociados al evento.
          example:
            disclosure_request_id: "dreq_1B2M2Y8AsgTpgAmY7PhCfg"
            identity_id: "id_ma21KLsmaslopask912Aa2"
            user_reference: "user_123"
        created_at:
          type: string
          format: date-time
          description: Fecha y hora en que se registró el evento.
          example: "2024-03-20T15:30:00Z"
    SignedDocument:
      x-tags:
        - Signed documents
      type: object
      description: |
        Los documentos firmados son documentos digitales que han sido autenticados por los usuarios mediante su firma electrónica.
        Estos documentos pueden incluir contratos, acuerdos legales, y otros documentos importantes que requieren confirmación
        de identidad y consentimiento explícito del usuario.

        La firma de estos documentos se gestiona a través del modelo `SignatureAttempt`, que verifica la identidad del usuario
        y asegura que la firma sea válida y segura.

        ### Guias relacionadas
        - [Solicitudes de firma de documentos](/docs/integration-guide/modules/signature)
      properties:
        id:
          type: string
          description: Identificador único del documento firmado.
          example: "sd_1B2M2Y8AsgTpgAmY7PhCfg"
        identity_id:
          type: string
          description: Identificador de la identidad participante en la firma.
          example: "id_ma21KLsmaslopask912Aa2"
        created_at:
          type: string
          format: date-time
          description: Fecha y hora en que se registró el documento firmado.
          example: "2024-03-20T15:30:00Z"
    AgreementBase:
      type: object
      description: Representa la estructura básica de un acuerdo para listados
      properties:
        id:
          type: string
          description: Identificador único del acuerdo.
          example: "agr_IdBeyWCa1ENLUYnPRLpCUg"
        version:
          type: integer
          description: Versión del acuerdo
          example: 1
        identity:
          type: object
          properties:
            id:
              type: string
              description: Identificador de la identidad
              example: "id_wCntp5aXB5q7fKSthevwrw"
            email:
              type: string
              description: Correo de la identidad asociada
              example: "example@soyio.id"
        data:
          type: array
          description: Datos procesados del agreement de acuerdo a la taxonomía de datos
          items:
            $ref: "#/components/schemas/ProcessedDatum"
        user_reference:
          type: string
          description: Referencia de usuario proporcionada por el cliente.
          example: "user_123"
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación del acuerdo.
          example: "2024-11-21T14:54:57.167Z"

    AgreementDetail:
      x-tags:
        - Agreements
      type: object
      title: Agreement
      description: Representa la estructura detallada de un acuerdo específico
      allOf:
        - $ref: "#/components/schemas/AgreementBase"
        - type: object
          properties:
            previous_evidence_ids:
              type: array
              description: IDs de evidencias anteriores relacionadas con este acuerdo
              items:
                type: string
              example: ["evd_pNMroI2OEfrDNdi8xT6kOQ"]
            identity:
              type: object
              properties:
                id:
                  type: string
                  description: Identificador de la identidad
                  example: "id_wCntp5aXB5q7fKSthevwrw"
                email:
                  type: string
                  description: Correo de la identidad asociada
                  example: "example@soyio.id"
            data:
              type: array
              description: Datos específicos del acuerdo y sus usos permitidos
              items:
                $ref: "#/components/schemas/ProcessedDatum"

    AgreementList:
      type: object
      properties:
        agreements:
          type: array
          items:
            $ref: "#/components/schemas/AgreementBase"
        metadata:
          $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"

    Evidence:
      x-tags:
        - Agreements
      type: object
      description: Representa una evidencia que respalda un consentimiento o acuerdo.
      properties:
        id:
          type: string
          description: Identificador único de la evidencia.
          example: "evd_wCntp5aXB5q7fKSthevwrw"
        integrity_hash:
          type: string
          description: Hash criptográfico que garantiza la integridad de la evidencia.
          example: "28b0f934..."
        consent_method:
          type: object
          description: Información sobre el método de consentimiento utilizado.
          properties:
            category:
              type: string
              description: Categoría del método de consentimiento.
              example: "opt-in click"
            channel:
              type: string
              description: Canal a través del cual se obtuvo el consentimiento.
              example: "website"
            details:
              type: string
              description: Detalles específicos sobre cómo se obtuvo el consentimiento.
              example: "cliked in selector tab to opt-in consent"
            facilitator:
              type: string
              description: Entidad que facilitó el proceso de consentimiento.
              example: "soyio"
        identification_method:
          type: object
          description: Información sobre el método de identificación utilizado.
          properties:
            data_subject_id:
              type: string
              description: ID del sujeto de datos identificado.
              example: "id_ftKAfJCmbmGe1t2X1Kt3gw"
            type:
              type: string
              description: Tipo de método de identificación utilizado.
              example: "soyio.validation"
            type_reference:
              type: string
              description: Referencia al proceso de identificación específico.
              example: "va_Pwj5xTQYQ4vciUZPqnVTdg"
        contextual_data:
          type: object
          description: Datos contextuales del momento del consentimiento.
          properties:
            ip:
              type: string
              description: Dirección IP desde donde se realizó la acción.
              example: "192.168.65.1"
            user_agent:
              type: string
              description: User agent del navegador utilizado.
              example: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
        agreement_change:
          type: object
          description: Información sobre el cambio en el acuerdo.
          properties:
            action:
              type: string
              description: Tipo de acción realizada sobre el acuerdo.
              example: "grant"
        event_logs:
          type: array
          description: Registro cronológico de eventos relacionados con la evidencia.
          items:
            type: object
            properties:
              description:
                type: string
                description: Descripción del evento.
                example: "Disclosure request was created"
              timestamp:
                type: string
                format: date-time
                description: Fecha y hora del evento.
                example: "2024-11-21T14:54:29.802Z"
              type:
                type: string
                description: Tipo de evento.
                example: "disclosure_created"
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación de la evidencia.
          example: "2024-11-21T14:54:57.202Z"

    ProcessedDatum:
      type: object
      description: Representa un dato procesado de acuerdo a la taxonomía de datos.
      properties:
        key:
          type: string
          description: Identificador del dato
          example: "name"
        data_category:
          type: string
          description: Categoría del dato personal. Sigue la taxonomía de datos. Para más información, consulta [el detalle de la taxonomía](/docs/integration-guide/concepts/agreement#taxonomía)
          example: "user.name.first"
        data_uses:
          type: array
          description: Usos permitidos para este dato
          items:
            $ref: "#/components/schemas/DataUse"

    DataUse:
      type: object
      description: Representa el uso específico de un dato.
      properties:
        use:
          type: string
          description: Propósito específico del uso del dato. Sigue la taxonomía de usos de datos. Para más información, consulta [el detalle de la taxonomía](/docs/integration-guide/concepts/agreement#taxonomía)
          example: "essential.service.authentication"
        expires_at:
          type: string
          format: date
          description: Fecha de expiración del permiso de uso
          example: "2034-12-06"
        document_references:
          type: array
          description: Referencias a documentos relacionados
          example: ["669823ed4c91e6af2537f984", "66b103a5d2e10ef171a9004b"]

    EvidenceList:
      type: object
      properties:
        evidences:
          type: array
          items:
            $ref: "#/components/schemas/Evidence"
        metadata:
          $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"

    PrivacyDocument:
      type: object
      x-tags:
        - Privacy documents
      description: |
        Los documentos de privacidad son configuraciones que permiten gestionar documentos legales como términos y condiciones o políticas de privacidad. Estos documentos pueden ser referenciados desde distintos templates usando su `template_key`.
      properties:
        id:
          type: string
          description: Identificador único. Debe empezar con `privdoc_`
          example: "privdoc_jy21JCGqb-VHhHeUd2nmKw"
        name:
          type: string
          description: Texto que se mostrará al usuario
          example: "términos y condiciones"
        template_key:
          type: string
          description: Identificador para referenciar el documento
          example: "terms_and_conditions"
        url:
          type: string
          description: URL para acceder al documento
          example: "/download_url"

    PrivacyDocumentList:
      type: object
      properties:
        privacy_documents:
          type: array
          items:
            $ref: "#/components/schemas/PrivacyDocument"
        metadata:
          $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"

    ApiResponse:
      type: object
      description: Respuesta estándar para las operaciones de la API que incluyen código y mensaje de estado.
      properties:
        code:
          type: integer
          format: int32
          description: Código numérico que representa el estado de la respuesta.
          example: 200
        type:
          type: string
          description: Tipo de mensaje de la respuesta, por ejemplo, "error" o "success".
          example: "success"
        message:
          type: string
          description: Mensaje descriptivo acerca del resultado de la operación.
          example: "Operación completada exitosamente"
      xml:
        name: "##default"
    Webhook:
      x-tags:
        - Webhooks
      type: object
      description: |
        Los webhooks son endpoints HTTP que reciben notificaciones cuando ocurren eventos en el sistema.
        Cada webhook puede estar suscrito a uno o más tipos de eventos.
      properties:
        id:
          type: string
          description: Identificador único del webhook
          example: "wh_1B2M2Y8AsgTpgAmY7PhCfg"
        url:
          type: string
          description: URL donde se enviarán los eventos
          example: "https://company.com/your-webhook-endpoint"
        subscriptions:
          type: array
          description: |
            Lista de eventos a los que está suscrito el webhook. Los eventos disponibles son:

            - `*`: Todos los eventos
            - `disclosure_request.granted`
            - `disclosure_request.timed_out`
            - `disclosure_request.fail`
            - `validation_attempt.successful`
            - `validation_attempt.failed`
            - `auth_attempt.failed`
            - `auth_attempt.successful`
            - `signature_attempt.successful`
            - `signature_attempt.failed`
            - `auth_request.successful`

            **TIP**:
            Puedes suscribirte a todos los eventos de un recurso específico usando el wildcard `*`.
            Por ejemplo, para suscribirte a todos los eventos de los `disclosure_request`, puedes suscribirte a `disclosure_request.*`.

          items:
            type: string
          example: ["*", "auth_attempt.*", "validation_attempt.*"]
        enabled_modes:
          type: array
          description: Lista de modos en los que el webhook está habilitado
          items:
            type: string
          example: ["production", "sandbox"]
        enabled:
          type: boolean
          description: Indica si el webhook está habilitado o no
          example: true
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación del webhook
          example: "2024-03-20T15:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Fecha y hora de la última actualización del webhook
          example: "2024-03-20T15:30:00Z"

    WebhookInput:
      type: object
      required:
        - url
        - subscriptions
      properties:
        url:
          type: string
          description: URL donde se enviarán los eventos
          example: "https://company.com/your-webhook-endpoint"
        subscriptions:
          type: array
          description: |
            Lista de eventos a los que se suscribirá el webhook. Puedes ver el [schema](/docs/api/resources/schemas/webhook) para más información.
          items:
            type: string
          example: ["*", "auth_attempt.*", "validation_attempt.*"]
        enabled_modes:
          type: array
          description: Lista de modos en los que el webhook estará habilitado. Si no se especifica, se usará el modo actual.
          items:
            type: string
          example: ["production", "sandbox"]
        enabled:
          type: boolean
          description: Indica si el webhook está habilitado o no
          default: true
          example: true

    WebhookList:
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: "#/components/schemas/Webhook"
        metadata:
          $ref: "#/components/schemas/FilterOrderAndPaginationMetadata"
    Product:
      x-tags:
        - Products
      type: object
      description: |
        Diferentes productos o servicios que ofrece tu compañía.
      properties:
        id:
          type: string
          description: ID único del producto. Se recomienda darle un identificador con un formato que facilite su identificación. Este identificador se usa para asociar consentimientos a un producto específico.
          example: "my_product_123"
  securitySchemes:
    api_key:
      type: apiKey
      description: Esquema de autenticación mediante una clave API proporcionada en el encabezado de las solicitudes.
      name: Authorization
      in: header

  parameters:
    PageParam:
      name: page
      in: query
      description: Número de página
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1

    PerPageParam:
      name: per_page
      in: query
      description: Número de entradas por página
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      example: 20

    OrderByParam:
      name: order_by
      in: query
      description: Orden de los resultados (ej. "created_at DESC")
      required: false
      schema:
        type: string
      example: "created_at DESC"

  responses:
    SuccessResponse:
      description: Respuesta exitosa
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: object
                description: Los datos de la respuesta exitosa

    UnauthorizedError:
      description: Error de autenticación
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - title
              - status
              - detail
            properties:
              type:
                type: string
                example: "authentication_error"
              title:
                type: string
                example: "Unauthorized"
              status:
                type: integer
                example: 401
              detail:
                type: string
                example: "We could not authenticate your credentials. Please check the documentation at https://docs.soyio.id"

    NotFoundError:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - title
              - status
              - detail
            properties:
              type:
                type: string
                example: "invalid_request_error"
              title:
                type: string
                example: "Resource not found"
              status:
                type: integer
                example: 404
              detail:
                type: string
                example: "Couldn't find Consenttemplate with id '<id>'. Please check your request and try again"

    ValidationError:
      description: Error de validación
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - title
              - status
              - errors
            properties:
              type:
                type: string
                example: "validation_error"
              title:
                type: string
                example: "Validation error"
              status:
                type: integer
                example: 422
              errors:
                type: array
                items:
                  type: string
                example:
                  - "Availability period in months is not a number"