openapi: 3.1.0
info:
  title: Soyio API
  description: API del Servicio de Identidad de Soyio
  contact:
    email: soporte@soyio.id
  version: 1.0.0
servers:
  - url: 'https://sandbox.soyio.id/api/v1'
    description: Servidor de pruebas (sandbox)
  - url: 'https://app.soyio.id/api/v1'
    description: Servidor de producción (production)
tags:
  - name: Disclosure requests
    description: |
      Los disclosure requests representan el proceso en que una compañía solicita datos de una identidad verificada.
  - name: Auth requests
    description: |
      Los auth requests son una forma de autenticar a identidades previamente validadas a través de un `disclosure_request`.
  - name: Consent templates
    description: |
      Los templates de consentimiento te permiten estandarizar la forma en que solicitas datos a tus usuarios.
      Contienen la lista de datos requeridos, sus usos, así como referencias a documentos de privacidad.
  - name: Consent actions
    description: |
      Los consent actions permiten crear acciones de consentimiento.
  - name: Consent commits
    description: |
      Los consent commits permiten crear múltiples acciones de consentimiento.
  - name: Privacy documents
    description: |
      Los documentos de privacidad son archivos que contienen información legal y de privacidad
      que pueden ser referenciados tanto en los `disclosure_templates` como los `consent_templates`.
  - name: Identities
    description: Los objetos de identidad permiten gestionar los datos de identidad de tus usuarios.
  - name: Validation attempts
    description: |
      Los intentos de validación, representan los procesos de validación de identidades de los usuarios. Estos obedecen a una serie de reglas de validación representadas por un template de validación.
  - name: Auth attempts
    description: |
      Los intentos de autenticación representan movimientos de una identidad al intentar autenticarse con tu sistema.

      El tipo de autenticación dependerá del registro del dispositivo de autenticación del usuario. En el caso de que un usuario no tenga su dispositivo de autenticación registrado, el tipo de validación será facial. En ese momento se le pedirá registrar el dispositivo.
  - name: Signature attempts
    description: |
      Representan los intentos de los usuarios para firmar ciertos documentos, los cuales dependen del SignatureAttemptTemplate. La firma puede realizarse por medio de llaves de acceso para cuando el usuario haya registrado una, o por medio de video facial cuando el usuario por alguna razón no puede usar la llave de acceso.
  - name: Data subject requests
    description: |
      Representan las solicitudes de ejercicio de derechos de los usuarios.

      ### Guías relacionadas

      - [Gestor de privacidad](/docs/integration-guide/modules/privacy-manager)
  - name: Events
    description: |
      Los eventos nos permiten comunicarte cambios relevantes en el sistema. Cuando ocurre un evento interesante, se crea un objeto evento. Por ejemplo, cuando se valida una identidad, se crea un evento `validation_attempt.succeeded`; cuando una validación falla, se crea un objeto `validation_attempt.failed`.

      > Una llamada a la API **puede generar 1 o más eventos**.

      Los eventos pueden ser enviados directamente a tu servidor a través de la utilización de webhooks.

      ### Guías relacionadas

      - [Webhooks](/docs/api/webhooks)
  - name: Signed documents
    description: |
      Los documentos firmados son documentos digitales que han sido autenticados por los usuarios mediante su firma electrónica. Estos documentos pueden incluir contratos, acuerdos legales, y otros documentos importantes que requieren confirmación de identidad y consentimiento explícito del usuario.

      La firma de estos documentos se gestiona a través del modelo `SignatureAttempt`, que verifica la identidad del usuario y asegura que la firma sea válida y segura.
  - name: Agreements
    description: |
      Los acuerdos (agreements) representan las reglas de compartimiento de datos entre la empresa y un usuario.
      Cada acuerdo puede tener múltiples versiones y evidencias asociadas que respaldan su validez.
      Las evidencias pueden incluir archivos descargables que proporcionan prueba del consentimiento otorgado.
  - name: Webhooks
    description: |
      Los webhooks permiten recibir notificaciones en tiempo real cuando ocurren eventos en el sistema.
      Puedes configurar múltiples webhooks y suscribirlos a diferentes tipos de eventos.

      > Cada webhook puede estar suscrito a uno o más tipos de eventos. Por ejemplo, puedes suscribirte a todos los eventos de la identidad, o a todos los eventos de validación.

      :::danger[Atención]
      Si un webhook falla, se intentará enviar nuevamente hasta un máximo de 15 veces. Luego de eso, el webhook se **deshabilitará automáticamente**.
      :::

      ### Guías relacionadas
      - [Webhooks](/docs/api/webhooks)
  - name: Products
    description: |
      Diferentes productos o servicios que ofrece tu compañía.
  - name: Entities
    description: |
      Las entidades representan a los usuarios que interactúan con tu compañía, pero que no han realizado una validación de identidad.
  - name: Company
    description: |
      La compañía es el objeto que representa a tu empresa y sus respectivas configuraciones. La mayoría de los objetos de nuestra API están relacionados a una compañía.
  - name: Privacy center
    description: |
      El centro de privacidad permite a los usuarios gestionar sus consentimientos y datos personales.
      Proporciona endpoints para obtener tokens de sesión que permiten acceder a funcionalidades específicas
      del centro de privacidad.
paths:
  /consent_templates:
    get:
      tags:
        - Consent templates
      summary: Obtener todos los templates de consentimiento
      operationId: indexConsentTemplates
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Templates de consentimiento encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentTemplateList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
    post:
      tags:
        - Consent templates
      summary: Crear un template de consentimiento
      operationId: createConsentTemplate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentTemplateInput'
      responses:
        '201':
          description: Template de consentimiento creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentTemplate'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Error de validación
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      errors:
                        example:
                          - Availability period in months is not a number
      security:
        - api_key: []
  '/consent_templates/{id}':
    get:
      tags:
        - Consent templates
      summary: Obtener un template de consentimiento
      operationId: getConsentTemplate
      parameters:
        - name: id
          in: path
          required: true
          description: ID del template de consentimiento
          schema:
            type: string
      responses:
        '200':
          description: Template de consentimiento encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentTemplate'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
    patch:
      tags:
        - Consent templates
      summary: Actualizar un template de consentimiento
      operationId: updateConsentTemplate
      parameters:
        - name: id
          in: path
          required: true
          description: ID del template de consentimiento
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentTemplateInput'
      responses:
        '200':
          description: Template de consentimiento actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentTemplate'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
        - api_key: []
  /privacy_documents:
    get:
      tags:
        - Privacy documents
      summary: Obtener todos los documentos de privacidad
      operationId: indexPrivacyDocuments
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Documentos de privacidad encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivacyDocumentList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
    post:
      tags:
        - Privacy documents
      summary: Crea un privacy document
      operationId: createPrivacyDocument
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - template_key
                - file
              properties:
                name:
                  type: string
                  description: 'Texto que aparecerá en el módulo embebible, al referenciarlo con el `template_key`.'
                  example: términos y condiciones
                template_key:
                  type: string
                  description: Llave única para referenciar el documento en templates.
                  example: terms_and_conditions
                file:
                  type: string
                  format: binary
                  description: Archivo del documento
      responses:
        '201':
          description: Documento de privacidad creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  privacy_document:
                    $ref: '#/components/schemas/PrivacyDocument'
        '400':
          description: Error de solicitud - falta algún campo requerido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: object
                    properties:
                      type:
                        type: string
                        example: invalid_request_error
                      title:
                        type: string
                        example: Missing parameter
                      status:
                        type: integer
                        example: 400
                      detail:
                        type: string
                        example: The required parameter file is missing
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Error de validación
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      errors:
                        example:
                          - Privacy documents is invalid
  '/privacy_documents/{id}':
    get:
      tags:
        - Privacy documents
      summary: Obtener un documento de privacidad específico
      operationId: getPrivacyDocument
      parameters:
        - name: id
          in: path
          description: ID del documento de privacidad
          required: true
          schema:
            type: string
          example: privdoc_jy21JCGqb-VHhHeUd2nmKw
      responses:
        '200':
          description: Documento de privacidad encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  privacy_document:
                    $ref: '#/components/schemas/PrivacyDocument'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  /disclosure_requests:
    get:
      tags:
        - Disclosure requests
      summary: Obtener todos los disclosure requests
      operationId: indexDisclosureRequests
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            status_filter:
              summary: Filtrar por estado
              value: '{"status":{"=":"pending"}}'
            date_filter:
              summary: Filtrar por fecha de creación
              value: '{"created_at":{">":"2024-01-01"}}'
            combined_filter:
              summary: Filtros combinados
              value: '{"status":{"=":"pending"},"created_at":{">":"2024-01-01"}}'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Disclosure requests encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisclosureRequestList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
    post:
      tags:
        - Disclosure requests
      summary: Crear un disclosure request
      operationId: createDisclosureRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - disclosure_template_id
                - user_reference
                - user_email
              properties:
                disclosure_template_id:
                  type: string
                  description: Identificador del disclosure template.
                  example: dtpl_3D4O4A0CuiVriCnA9RjEhi
                user_reference:
                  type: string
                  description: Referencia de usuario de tu sistema para el disclosure request.
                  example: user_123
                user_email:
                  type: string
                  description: Correo electrónico del usuario para el disclosure request.
                  example: walter@white.com
                entity_id:
                  type: string
                  description: Identificador de entidad previamente creada.
                  example: ent_3D4O4A0CuiVriCnA9RjEhi
                matchers:
                  type: array
                  description: Matchers del disclosure request. Campo opcional.
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        description: Clave del matcher.
                        example: cl_carnet_rut
                        enum:
                          - cl_carnet_rut
                          - name
                          - last_name
                          - date_of_birth
                      value:
                        type: string
                        description: Valor del matcher.
                        example: 12345678-9
      responses:
        '201':
          description: Disclosure request creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  disclosure_request:
                    $ref: '#/components/schemas/DisclosureRequest'
        '422':
          description: Error de validación
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      errors:
                        example:
                          - Disclosure template is required
      security:
        - api_key: []
  '/disclosure_requests/{id}':
    get:
      tags:
        - Disclosure requests
      summary: Obtener un disclosure request específico
      operationId: getDisclosureRequest
      parameters:
        - name: id
          in: path
          description: Identificador único del disclosure request
          required: true
          explode: true
          schema:
            type: string
          example: dreq_1B2M2Y8AsgTpgAmY7PhCfg
      responses:
        '200':
          description: Disclosure request encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  disclosure_request:
                    $ref: '#/components/schemas/DisclosureRequest'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  /auth_requests:
    post:
      tags:
        - Auth requests
      summary: Crear un request de autenticación
      description: |
        Crea un nuevo request de autenticación para una identidad específica.
        El tipo de autenticación dependerá de si el usuario tiene un dispositivo registrado (passkey_validation)
        o no (facial_validation).
      operationId: createAuthRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identity_id:
                  type: string
                  description: Identificador único de la identidad que realizará el intento de autenticación.
                  example: id_ma21KLsmaslopask912Aa2
              required:
                - identity_id
      responses:
        '201':
          description: Request de autenticación creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_attempt:
                    $ref: '#/components/schemas/AuthAttempt'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Error de validación
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      errors:
                        example:
                          - Invalid identity_id
      security:
        - api_key: []
    get:
      tags:
        - Auth requests
      summary: Obtener todos los auth requests
      operationId: indexAuthRequests
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            status_filter:
              summary: Filtrar por estado
              value: '{"status":{"=":"awaiting_authentication"}}'
            identity_filter:
              summary: Filtrar por identidad
              value: '{"identity_id":{"=":"id_ma21KLsmaslopask912Aa2"}}'
            combined_filter:
              summary: Filtros combinados
              value: '{"status":{"=":"awaiting_authentication"},"identity_id":{"=":"id_ma21KLsmaslopask912Aa2"}}'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Auth requests encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRequestList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
  '/auth_requests/{id}':
    get:
      tags:
        - Auth requests
      summary: Obtener un auth request específico
      operationId: getAuthRequest
      parameters:
        - name: id
          in: path
          description: ID del auth request a buscar
          required: true
          schema:
            type: string
          example: authreq_Kop19_kEe23i7hSw8QG4-a
      responses:
        '200':
          description: Auth request encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_request:
                    $ref: '#/components/schemas/AuthRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  /data_subject_requests:
    post:
      tags:
        - Data subject requests
      summary: |
        Crea un data subject request.
      description: |
        :::info[Ojo]
        Dependiendo del tipo de request `kind`, se requerirá un `request_detail` diferente:
        - `access`, `portability`: `request_detail` es un objeto con las categorías de datos a solicitar.
        - `rectification`, `opposition`, `suppression`: `request_detail` es un arreglo con objetos que contienen los campos a modificar/eliminar.
        :::
      operationId: createDataSubjectRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSubjectRequestCreate'
      responses:
        '201':
          description: Data subject request creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSubjectRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Error de validación
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      errors:
                        example:
                          - 'Kind is not a valid value. Allowed values are: revoke, change'
                          - Description can't be blank
      security:
        - api_key: []
    get:
      tags:
        - Data subject requests
      summary: Obtener todos los data subject requests
      operationId: indexDataSubjectRequests
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Data subject requests encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSubjectRequestList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/data_subject_requests/{id}':
    get:
      tags:
        - Data subject requests
      summary: Obtener un data subject request específico
      operationId: getDataSubjectRequest
      parameters:
        - name: id
          in: path
          description: ID del data subject request a buscar
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: Data subject request encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSubjectRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  /identities:
    get:
      tags:
        - Identities
      summary: Obtener todas las identidades
      operationId: indexIdentities
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            email_filter:
              summary: Filtrar por email
              value: '{"email":{"like":"@example.com"}}'
            data_filter:
              summary: Filtrar por datos personales
              value: '{"data":{"name":{"=":"John"}}}'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Identidades encontradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
  '/identities/{id}':
    get:
      tags:
        - Identities
      summary: Obtener una identidad específica
      operationId: getIdentity
      parameters:
        - name: id
          in: path
          description: ID de la identidad a buscar
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: Operación exitosa
          content:
            application/json:
              schema:
                type: object
                properties:
                  identity:
                    $ref: '#/components/schemas/Identity'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
  /validation_attempts:
    get:
      tags:
        - Validation attempts
      summary: Obtener todos los intentos de validación
      operationId: indexValidationAttempts
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            status_filter:
              summary: Filtrar por estado
              value: '{"status":{"=":"successful"}}'
            date_range:
              summary: Filtrar por rango de fechas
              value: '{"created_at":{">":"2024-01-01","<":"2024-12-31"}}'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Intentos de validación encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationAttemptList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/validation_attempts/{id}':
    get:
      tags:
        - Validation attempts
      summary: Obtener un flujo de validación específico
      description: Retorna un flujo de validación dado su ID.
      operationId: getValidationAttempt
      parameters:
        - name: id
          in: path
          description: ID del flujo de validación a buscar
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: Flujo de validación encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  validation_attempt:
                    $ref: '#/components/schemas/ValidationAttempt'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /auth_attempts:
    get:
      tags:
        - Auth attempts
      summary: Obtener todos los intentos de autenticación
      operationId: indexAuthAttempts
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            status_filter:
              summary: Filtrar por estado
              value: '{"status":{"=":"successful"}}'
            type_filter:
              summary: Filtrar por tipo de autenticación
              value: '{"auth_type":{"=":"passkey_validation"}}'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Intentos de autenticación encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthAttemptList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/auth_attempts/{id}':
    get:
      tags:
        - Auth attempts
      summary: Obtener un intento de autenticación específico
      description: Retorna un intento de autenticación dado su ID.
      operationId: getAuthAttempt
      parameters:
        - name: id
          in: path
          description: ID del intento de autenticación a buscar
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: Intento de autenticación encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_attempt:
                    $ref: '#/components/schemas/AuthAttempt'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /signature_attempts:
    post:
      tags:
        - Signature attempts
      summary: Crear un intento de firma
      description: |
        Crea un nuevo intento de firma para un documento basado en un template específico.
        Se deben proporcionar variables clave-valor dinámicas necesarias para el proceso de firma.
      operationId: createSignatureAttempt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identity_id:
                  type: string
                  description: Identificador único de la identidad que realiza el intento de firma.
                  example: id_ma21KLsmaslopask912Aa2
                template_id:
                  type: string
                  description: Identificador del template de firma a utilizar.
                  example: st_9F42D8L0JQ7p82H
                variables:
                  type: array
                  description: Array de pares clave-valor que serán utilizados en el documento a firmar.
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        description: Nombre de la variable que se utilizará en el template de firma.
                      value:
                        type: string
                        description: Valor asociado a la clave especificada.
                  examples:
                    - - key: first_variable_key
                        value: first_variable_value
                      - key: second_variable_key
                        value: second_variable_value
              required:
                - identity_id
                - template_id
                - variables
      responses:
        '201':
          description: Intento de firma creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature_attempt:
                    $ref: '#/components/schemas/SignatureAttempt'
        '400':
          description: 'Datos de entrada inválidos, ya sea porque faltan variables, o se entregaron variables extra.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    description: Lista de mensajes de error describiendo los problemas con la solicitud.
                    items:
                      type: array
                      items:
                        type: string
                    examples:
                      - - 'Missing key: <missing_example_key>'
                        - 'Missing key: <another_missing_example_key>'
                        - Key <extra_key> does not exist in the signature template
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
    get:
      tags:
        - Signature attempts
      summary: Obtener todos los intentos de firma
      operationId: indexSignatureAttempts
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            status_filter:
              summary: Filtrar por estado
              value: '{"status":{"=":"successful"}}'
            identity_filter:
              summary: Filtrar por identidad
              value: '{"identity_id":{"=":"id_ma21KLsmaslopask912Aa2"}}'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Intentos de firma encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureAttemptList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/signature_attempts/{id}':
    get:
      tags:
        - Signature attempts
      summary: Obtener un intento de firma específico
      description: Retorna un intento de firma dado su ID.
      operationId: getSignatureAttempt
      parameters:
        - name: id
          in: path
          description: ID del intento de firma a buscar
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: Intento de firma encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature_attempt:
                    $ref: '#/components/schemas/SignatureAttempt'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /events:
    get:
      tags:
        - Events
      summary: Obtener todos los eventos
      operationId: indexEvents
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            event_name:
              summary: Filtrar por nombre del evento
              value: '{"name":{"=":"disclosure_request.granted"}}'
            date_range:
              summary: Filtrar por rango de fechas
              value: '{"created_at":{">":"2024-01-01","<":"2024-12-31"}}'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Eventos encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/events/{id}':
    get:
      tags:
        - Events
      summary: Obtener un evento específico
      description: Obtiene los detalles de un evento existente.
      operationId: getEvent
      parameters:
        - name: id
          in: path
          description: ID del evento a buscar
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: Evento encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  '/events/{id}/broadcast':
    post:
      tags:
        - Events
      summary: Reenviar un evento a los webhooks suscritos
      description: |
        Permite reenviar manualmente un evento a todos los webhooks suscritos de la compañía.
        Este endpoint es útil cuando necesitas retransmitir un evento específico, por ejemplo,
        si hubo problemas en la recepción original del webhook.
      operationId: broadcastEvent
      parameters:
        - name: id
          in: path
          description: Id del evento
          required: true
          schema:
            type: string
          example: evt_jy21JCGqb-VHhHeUd2nmKw
      responses:
        '204':
          description: El evento fue enviado exitosamente a la cola de webhooks
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  /signed_documents:
    get:
      tags:
        - Signed documents
      summary: Obtener todos los documentos firmados.
      description: 'Retorna una lista de documentos firmados. Los documentos se encuentran ordenados por defecto por la fecha de creación, donde los más recientes aparecerán primero.'
      operationId: indexSignedDocuments
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            identity_filter:
              summary: Filtrar por identidad
              value: '{"identity_id":{"=":"id_ma21KLsmaslopask912Aa2"}}'
            date_filter:
              summary: Filtrar por fecha de firma
              value: '{"created_at":{">":"2024-01-01"}}'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Documentos firmados encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedDocumentList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/signed_documents/{id}':
    get:
      tags:
        - Signed documents
      summary: Obtener un documento firmado.
      description: Obtiene los detalles de un documento firmado.
      operationId: getSignedDocument
      parameters:
        - name: id
          in: path
          description: ID del documento firmado
          required: true
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: Document firmado encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: '#/components/schemas/SignedDocument'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /agreements:
    get:
      tags:
        - Agreements
      summary: Obtener todos los acuerdos
      description: Retorna la lista de todos los acuerdos en su última versión.
      operationId: indexAgreements
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            user_reference_filter:
              summary: Filtrar por `user_reference`
              value: '{"user_reference":{"=":"user_123"}}'
            entity_filter:
              summary: Filtrar por entidad
              value: '{"entity_id":{"=":"ent_cYTjMLgWE3MvUa3RKwgXEg"}}'
            identity_filter:
              summary: Filtrar por identidad
              value: '{"identity_id":{"=":"id_ma21KLsmaslopask912Aa2"}}'
            data_use_filter:
              summary: |
                Filtrar por finalidad del dato. Retorna los agreements que incluyen al menos uno de los valores proporcionados.
                Si se proporciona una categoría general (e.g. `essential`), se incluyen los casos más específicos (e.g. `essential.service`).
              value: '{"data_uses":{"in":["analytics", "marketing"]}}'
            data_category:
              summary: |
                Filtrar por categoría del dato. Retorna los agreements que incluyen al menos uno de los valores proporcionados.
                Si se proporciona una categoría general (e.g. `user.name`), se incluyen los casos más específicos (e.g. `user.name.first`).
              value: '{"data_categories":{"in":["user.name", "user.contact.email"]}}'
            date_filter:
              summary: Filtrar por fecha de creación
              value: '{"created_at":{">":"2024-01-01"}}'
            combined_filter:
              summary: Filtros combinados
              value: '{"status":{"=":"active"},"created_at":{">":"2024-01-01"}}'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Acuerdos encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgreementList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
  '/agreements/{id}':
    get:
      tags:
        - Agreements
      summary: Obtener un acuerdo específico
      description: Retorna los detalles de un acuerdo en su última versión.
      operationId: getAgreement
      parameters:
        - name: id
          in: path
          description: ID del acuerdo a buscar
          required: true
          schema:
            type: string
          example: agr_1B2M2Y8AsgTpgAmY7PhCfg
      responses:
        '200':
          description: Acuerdo encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  agreement:
                    $ref: '#/components/schemas/AgreementDetail'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  '/agreements/{id}/evidences':
    get:
      tags:
        - Agreements
      summary: Obtener todas las evidencias de un acuerdo
      description: Retorna la lista de evidencias asociadas a un acuerdo específico.
      operationId: getAgreementEvidences
      parameters:
        - name: id
          in: path
          description: ID del acuerdo
          required: true
          schema:
            type: string
          example: agr_1B2M2Y8AsgTpgAmY7PhCfg
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Evidencias encontradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvidenceList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  '/agreements/{id}/evidences/{evidenceId}':
    get:
      tags:
        - Agreements
      summary: Obtener una evidencia específica de un acuerdo
      description: Retorna los detalles de una evidencia específica asociada a un acuerdo.
      operationId: getAgreementEvidence
      parameters:
        - name: id
          in: path
          description: ID del acuerdo
          required: true
          schema:
            type: string
          example: agr_1B2M2Y8AsgTpgAmY7PhCfg
        - name: evidenceId
          in: path
          description: ID de la evidencia
          required: true
          schema:
            type: string
          example: ev_2C3N3Z9BthUqhBnZ8QiDgj
      responses:
        '200':
          description: Evidencia encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  evidence:
                    $ref: '#/components/schemas/Evidence'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  '/agreements/{id}/evidences/{evidenceId}/download':
    get:
      tags:
        - Agreements
      summary: Descargar el archivo de una evidencia específica
      description: Permite descargar el archivo asociado a una evidencia específica de un acuerdo. Es útil en caso de auditoría o querer demostrar en formato PDF que el acuerdo tuvo un cambio.
      operationId: downloadAgreementEvidence
      parameters:
        - name: id
          in: path
          description: ID del agreement
          required: true
          schema:
            type: string
          example: agr_1B2M2Y8AsgTpgAmY7PhCfg
        - name: evidenceId
          in: path
          description: ID de la evidencia
          required: true
          schema:
            type: string
          example: ev_2C3N3Z9BthUqhBnZ8QiDgj
      responses:
        '200':
          description: Archivo en formato PDF de evidencia
          content:
            application/pdf:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
                example: attachment; filename="name.pdf"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  '/agreements/{id}/versions':
    get:
      tags:
        - Agreements
      summary: Obtener todas las versiones de un acuerdo
      description: Retorna la lista de versiones asociadas a un acuerdo específico.
      operationId: getAgreementVersions
      parameters:
        - name: id
          in: path
          description: ID del acuerdo
          required: true
          schema:
            type: string
          example: agr_1B2M2Y8AsgTpgAmY7PhCfg
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Versiones encontradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgreementList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  '/agreements/{id}/versions/{versionNumber}':
    get:
      tags:
        - Agreements
      summary: Obtener una versión específica de un acuerdo
      description: Retorna los detalles de una versión específica de un acuerdo.
      operationId: getAgreementVersion
      parameters:
        - name: id
          in: path
          description: ID del acuerdo
          required: true
          schema:
            type: string
          example: agr_1B2M2Y8AsgTpgAmY7PhCfg
        - name: versionNumber
          in: path
          description: Número de versión
          required: true
          schema:
            type: string
          example: '1'
      responses:
        '200':
          description: Versión encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    $ref: '#/components/schemas/AgreementBase'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  '/agreements/{id}/versions/{versionNumber}/evidence':
    get:
      tags:
        - Agreements
      summary: Obtener la evidencia de una versión específica
      description: Retorna la evidencia asociada a una versión específica de un acuerdo.
      operationId: getAgreementVersionEvidence
      parameters:
        - name: id
          in: path
          description: ID del acuerdo
          required: true
          schema:
            type: string
          example: agr_1B2M2Y8AsgTpgAmY7PhCfg
        - name: versionNumber
          in: path
          description: Número de versión
          required: true
          schema:
            type: string
          example: '1'
      responses:
        '200':
          description: Evidencia encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  evidence:
                    $ref: '#/components/schemas/Evidence'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  /consent_actions:
    post:
      tags:
        - Consent actions
      summary: Crear un consent action
      operationId: createConsentAction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action_token
              properties:
                action_token:
                  type: string
                  description: Token JWT de la acción de consentimiento
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                user_reference:
                  type: string
                  description: Referencia del usuario
                  example: '1234567890'
                entity_id:
                  type: string
                  description: 'ID de la entidad. Si no se proporciona, se creará una nueva entidad.'
                  example: ent_1234567890
      responses:
        '201':
          description: Consent action creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentAction'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
    get:
      tags:
        - Consent actions
      summary: Listar consent actions
      operationId: indexConsentActions
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/OrderByParam'
        - name: where
          in: query
          description: Filtros en formato JSON
          required: false
          schema:
            type: string
          examples:
            entity_filter:
              summary: Filtrar por entidad
              value: '{"entity_id":{"=":"ent_cYTjMLgWE3MvUa3RKwgXEg"}}'
            consent_template_filter:
              summary: Filtrar por template de consentimiento
              value: '{"consent_template_id":{"=":"ctmpl_cYTjMLgWE3MvUa3RKwgXEg"}}'
      responses:
        '200':
          description: Lista de consent actions
          content:
            application/json:
              schema:
                type: object
                properties:
                  consent_actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConsentAction'
                  metadata:
                    $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
  '/consent_actions/{id}':
    get:
      tags:
        - Consent actions
      summary: Obtener un consent action
      operationId: showConsentAction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id del consent action
          example: consact_1B2M2Y8AsgTpgAmY7PhCfg
      responses:
        '200':
          description: Consent action encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  consent_action:
                    $ref: '#/components/schemas/ConsentAction'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  /consent_commits:
    get:
      tags:
        - Consent commits
      summary: Listar commits de consentimiento
      operationId: indexConsentCommits
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
          description: Número de página
          example: 1
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
          description: Elementos por página
          example: 20
        - name: order_by
          in: query
          required: false
          schema:
            type: string
          description: Campo y dirección de ordenamiento
          example: created_at DESC
      responses:
        '200':
          description: Lista de consent commits
          content:
            application/json:
              schema:
                type: object
                properties:
                  consent_commits:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConsentCommit'
                  metadata:
                    $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
    post:
      tags:
        - Consent commits
      summary: Crear un commit de consentimiento
      description: |
        Crea un nuevo commit de consentimiento basado en los actions tokens. Cada action token
        representa una checkbox de consentimiento específico que el usuario ha marcado a través de nuestro módulo de consentimiento.
      operationId: createConsentCommit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - consent_actions
              properties:
                user_reference:
                  type: string
                  description: Referencia para identificar al usuario en tu sistema
                  example: user_123
                consent_actions:
                  type: array
                  description: Array de tokens que representan las acciones de consentimiento realizadas por el usuario
                  items:
                    type: object
                    properties:
                      action_token:
                        type: string
                        description: Token JWT de la acción de consentimiento
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zZW50X2lkIjoiY3RwbF8xMjM0NTY3ODkwIiwiZW50aXR5X2lkIjoiZW50XzVGNlE2QzJFd2tYdGtFcEIxVGxHamsiLCJpYXQiOjE1MTYyMzkwMjJ9.4p3gYtKmXkHWDyEA9L4ywJRBpVFWxG7pdq8LHbJhxvE
                  example:
                    - action_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zZW50X2lkIjoiY3RwbF8xMjM0NTY3ODkwIiwiZW50aXR5X2lkIjoiZW50XzVGNlE2QzJFd2tYdGtFcEIxVGxHamsiLCJpYXQiOjE1MTYyMzkwMjJ9.4p3gYtKmXkHWDyEA9L4ywJRBpVFWxG7pdq8LHbJhxvE
                    - action_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zZW50X2lkIjoiY3RwbF85ODc2NTQzMjEwIiwiZW50aXR5X2lkIjoiZW50XzVGNlE2QzJFd2tYdGtFcEIxVGxHamsiLCJpYXQiOjE1MTYyMzkwMjJ9.8vkoM1VO5Kp6Udz9ISFnU7YD7HcGYt9yCUuZGrYPe2s
                entity_id:
                  type: string
                  description: Identificador opcional de la entidad asociada a este consentimiento
                  example: ent_5F6Q6C2EwkXtkEpB1TlGjk
      responses:
        '201':
          description: Commit de consentimiento creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  consent_commit:
                    $ref: '#/components/schemas/ConsentCommit'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
        - api_key: []
  '/consent_commits/{id}':
    get:
      tags:
        - Consent commits
      summary: Obtener un commit de consentimiento
      operationId: showConsentCommit
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Id del commit de consentimiento
          example: ccom_1B2M2Y8AsgTpgAmY7PhCfg
      responses:
        '200':
          description: Commit de consentimiento encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  consent_commit:
                    $ref: '#/components/schemas/ConsentCommit'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  /webhooks:
    get:
      tags:
        - Webhooks
      summary: Obtener todos los webhooks
      operationId: indexWebhooks
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Webhooks encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
    post:
      tags:
        - Webhooks
      summary: Crear un webhook
      operationId: createWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - url
                - subscriptions
              properties:
                name:
                  type: string
                  description: Nombre del webhook
                  example: My Webhook
                url:
                  type: string
                  description: URL donde se enviarán los eventos
                  example: 'https://company.com/your-webhook-endpoint'
                subscriptions:
                  type: array
                  description: |
                    Lista de eventos a los que se suscribirá el webhook. Usa '*' para suscribirse a todos los eventos. También puedes suscribirte a eventos específicos de un recurso usando el patrón de wildcard, por ejemplo: `identity.*` suscribirá a todos los eventos del recurso identity.
                  items:
                    type: string
                  example:
                    - '*'
                    - auth_attempt.*
                    - validation_attempt.*
                enabled_modes:
                  type: array
                  description: 'Lista de modos en los que el webhook estará habilitado. Si no se especifica, se usará el modo actual.'
                  items:
                    type: string
                  example:
                    - production
                    - sandbox
                enabled:
                  type: boolean
                  description: Indica si el webhook está habilitado o no
                  default: true
                  example: true
      responses:
        '201':
          description: Webhook creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhook:
                    $ref: '#/components/schemas/Webhook'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
        - api_key: []
  '/webhooks/{id}':
    get:
      tags:
        - Webhooks
      summary: Obtener un webhook específico
      operationId: getWebhook
      parameters:
        - name: id
          in: path
          description: Id del webhook
          required: true
          schema:
            type: string
          example: wh_1B2M2Y8AsgTpgAmY7PhCfg
      responses:
        '200':
          description: Webhook encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhook:
                    $ref: '#/components/schemas/Webhook'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
    patch:
      tags:
        - Webhooks
      summary: Actualizar un webhook
      operationId: updateWebhook
      parameters:
        - name: id
          in: path
          description: Id del webhook
          required: true
          schema:
            type: string
          example: wh_1B2M2Y8AsgTpgAmY7PhCfg
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: URL donde se enviarán los eventos
                  example: 'https://company.com/your-webhook-endpoint'
                subscriptions:
                  type: array
                  description: |
                    Lista de eventos a los que se suscribirá el webhook. Usa '*' para suscribirse a todos los eventos. También puedes suscribirte a eventos específicos de un recurso usando el patrón de wildcard, por ejemplo: `identity.*` suscribirá a todos los eventos del recurso identity.
                  items:
                    type: string
                  example:
                    - '*'
                    - identity.created
                    - validation_attempt.*
                enabled_modes:
                  type: array
                  description: Lista de modos en los que el webhook estará habilitado
                  items:
                    type: string
                  example:
                    - production
                    - sandbox
                enabled:
                  type: boolean
                  description: Indica si el webhook está habilitado o no
                  example: true
      responses:
        '200':
          description: Webhook actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhook:
                    $ref: '#/components/schemas/Webhook'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
        - api_key: []
    delete:
      tags:
        - Webhooks
      summary: Eliminar un webhook
      operationId: deleteWebhook
      parameters:
        - name: id
          in: path
          description: Id del webhook
          required: true
          schema:
            type: string
          example: wh_1B2M2Y8AsgTpgAmY7PhCfg
      responses:
        '204':
          description: Webhook eliminado exitosamente
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  '/webhooks/{webhook_id}/transactions':
    get:
      tags:
        - Webhooks
      summary: Obtener todas las transacciones de un webhook específico
      operationId: indexWebhookTransactions
      parameters:
        - name: webhook_id
          in: path
          description: ID del webhook
          required: true
          schema:
            type: string
          example: wh_1B2M2Y8AsgTpgAmY7PhCfg
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Transacciones del webhook encontradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookTransactionList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  '/webhooks/{webhook_id}/transactions/{id}':
    get:
      tags:
        - Webhooks
      summary: Obtener una transacción específica de un webhook
      operationId: getWebhookTransaction
      parameters:
        - name: webhook_id
          in: path
          description: ID del webhook
          required: true
          schema:
            type: string
          example: wh_1B2M2Y8AsgTpgAmY7PhCfg
        - name: id
          in: path
          description: ID de la transacción del webhook
          required: true
          schema:
            type: string
          example: whtx_1B2M2Y8AsgTpgAmY7PhCde
      responses:
        '200':
          description: Transacción del webhook encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhook_transaction:
                    $ref: '#/components/schemas/WebhookTransaction'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  /products:
    get:
      tags:
        - Products
      summary: Obtener todos los productos
      operationId: indexProducts
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/OrderByParam'
      responses:
        '200':
          description: Productos encontrados
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  metadata:
                    $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
    post:
      tags:
        - Products
      summary: Crear un producto
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del producto. Se recomienda darle un identificador con un formato que facilite su identificación.
                  example: my_product_123
      responses:
        '201':
          description: Producto creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
        - api_key: []
  '/products/{id}':
    get:
      tags:
        - Products
      summary: Obtener un producto específico
      operationId: getProduct
      parameters:
        - name: id
          in: path
          description: Id del producto
          required: true
          schema:
            type: string
          example: prod_1B2M2Y8AsgTpgAmY7PhCfg
      responses:
        '200':
          description: Producto encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
  '/entities/{id}/agreement/compliance_statuses':
    get:
      tags:
        - Entities
      summary: Obtener los estados de cumplimiento de la entidad
      description: |
        Retorna una lista de estados de cumplimiento de la entidad respecto a los templates de consentimiento que tienes en tu empresa. Utiliza el último estado del agreement para evaluar si es que cumple o no cumple.
      operationId: getEntityAgreementComplianceStatuses
      parameters:
        - name: id
          in: path
          description: ID de la entidad
          required: true
          schema:
            type: string
          example: ent_1B2M2Y8AsgTpgAmY7PhCfg
        - name: where
          in: query
          description: 'Filtros en formato JSON. Por ahora, damos únicamente soporte para el filtro de igualdad con el `consent_template_id`.'
          required: false
          schema:
            type: string
          examples:
            consent_template_id_filter:
              summary: Filtrar por `consent_template_id`
              value: '{"consent_template_id":{"=":"constpl_7vH0nGSOnP9inT-1EsBP0g"}}'
      responses:
        '200':
          description: Todos los estados de cumplimiento de la entidad.
          content:
            application/json:
              schema:
                type: object
                properties:
                  compliance_statuses:
                    type: array
                    items:
                      $ref: '#/components/schemas/ComplianceStatus'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: 'Recurso no encontrado. Se puede dar cuando no existe un agreement entre tu empresa y la entidad en cuestión, o cuando la entidad no existe.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorSchema'
      security:
        - api_key: []
  /config:
    get:
      tags:
        - Company
      summary: Obtener la configuración de la empresa
      description: |
        Retorna los parámetros configurables de la empresa, como los canales de contacto para que tus usuarios puedan ejercer sus derechos.
      operationId: getCompanyConfig
      responses:
        '200':
          description: Configuración obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  config:
                    $ref: '#/components/schemas/Configuration'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - api_key: []
    patch:
      tags:
        - Company
      summary: Actualizar la configuración de la empresa
      operationId: updateCompanyConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                config:
                  $ref: '#/components/schemas/Configuration'
      responses:
        '204':
          description: Configuración actualizada exitosamente
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Error de validación
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /privacy_center/session_token:
    get:
      tags:
        - Privacy center
      summary: Obtener un token de sesión para el centro de privacidad
      description: |
        Genera un token JWT que permite acceder a los endpoints del centro de privacidad para una entidad específica.
        El token tiene una duración de 15 minutos y permite acceder a los endpoints de entidades, acciones de consentimiento,
        commits de consentimiento y templates de consentimiento.
      operationId: getPrivacyCenterSessionToken
      parameters:
        - name: entity_id
          in: query
          description: ID de la entidad para la cual se generará el token
          required: true
          schema:
            type: string
          example: ent_1B2M2Y8AsgTpgAmY7PhCfg
      responses:
        '200':
          description: Token generado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token JWT para acceder al centro de privacidad
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb21wYW55X2lkIjoiY29tcF8xMjM0NTY3ODkwIiwiZW50aXR5X2lkIjoiZW50XzFCMk0yWThBc2dUcGdBbVk3UGhDZmciLCJzY29wZSI6WyIvZW50aXRpZXMvKiIsIi9jb25zZW50X2FjdGlvbnMvKiIsIi9jb25zZW50X2NvbW1pdHMvKiIsIi9jb25zZW50X3RlbXBsYXRlcy8qIl0sImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE2MjQwMDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: Error de solicitud - falta el parámetro entity_id
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: invalid_request_error
                  title:
                    type: string
                    example: Bad Request
                  status:
                    type: integer
                    example: 400
                  detail:
                    type: string
                    example: The required parameter entity_id is missing
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - api_key: []
components:
  parameters:
    PageParam:
      name: page
      in: query
      description: Número de página
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1
    PerPageParam:
      name: per_page
      in: query
      description: Número de entradas por página
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      example: 20
    OrderByParam:
      name: order_by
      in: query
      description: Orden de los resultados (ej. "created_at DESC")
      required: false
      schema:
        type: string
      example: created_at DESC
  responses:
    SuccessResponse:
      description: Respuesta exitosa
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: object
                description: Los datos de la respuesta exitosa
    UnauthorizedError:
      description: Error de autenticación
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - title
              - status
              - detail
            properties:
              type:
                type: string
                example: authentication_error
              title:
                type: string
                example: Unauthorized
              status:
                type: integer
                example: 401
              detail:
                type: string
                example: 'We could not authenticate your credentials. Please check the documentation at https://docs.soyio.id'
    NotFoundError:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundErrorSchema'
  schemas:
    FilterOrderAndPaginationMetadata:
      type: object
      properties:
        page:
          type: integer
          description: Página actual
          example: 1
        per_page:
          type: integer
          description: Entradas por página
          example: 20
        total:
          type: integer
          description: Total de entradas
          example: 45
        order_by:
          type: string
          description: Orden de los resultados (ej. "created_at DESC")
          example: created_at DESC
        filters:
          type: object
          description: Filtros aplicados a la consulta
          example:
            status:
              '=': pending
    ConsentTemplateInput:
      type: object
      required:
        - name
        - title
        - text
        - availability_period_in_months
        - data_requirements
      properties:
        name:
          type: string
          description: Nombre del template
          example: Mi template de consentimiento
        availability_period_in_months:
          type: integer
          description: Período de disponibilidad en meses. Esto determina por cuánto tiempo puedes solicitar los datos del usuario desde que te dio su consentimiento.
          example: 12
        title:
          type: string
          description: Titulo que aparecerá en el checkbox del módulo de consentimiento
          example: Consentimiento general
        text:
          type: string
          description: |
            Texto del template de consentimiento. Permite referenciar [documentos de privacidad](/docs/api/resources/schemas/privacydocument).
          example: 'De acuerdo a los {{ terms_and_conditions }} y {{ privacy_policy }} de Soyio.'
        data_requirements:
          type: array
          description: Lista de requerimientos de datos
          items:
            $ref: '#/components/schemas/DataRequirementInput'
    ConsentTemplate:
      description: |
        Una _consent template_ (template de consentimiento) es una configuración necesaria para el módulo de [_consent_](/docs/integration-guide/modules/consent).
      x-tags:
        - Consent templates
      type: object
      required:
        - id
        - name
        - title
        - text
        - availability_period_in_months
        - data_requirements
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: Identificador único. Debe empezar con `constpl_`
          example: constpl_wAspvmEr4ACDZaPUtfwjsA
        name:
          type: string
          description: Nombre descriptivo de la template
          example: Consentimiento básico
        availability_period_in_months:
          type: integer
          description: Periodo de retención de datos en meses
          minimum: 1
          maximum: 120
          example: 12
        title:
          type: string
          description: Titulo que aparecerá en el checkbox del módulo de consentimiento
          example: Consentimiento general
        text:
          type: string
          description: |
            Texto del consentimiento. Permite referenciar [documentos de privacidad](/docs/api/resources/schemas/privacydocument).
          example: 'De acuerdo a los {{ terms_and_conditions }} y {{ privacy_policy }} de Soyio.'
        data_requirements:
          type: array
          description: 'Lista de requerimientos de datos con información adicional. Ver [recurso](/docs/api/resources/schemas/datarequirement) para más información.'
          minItems: 1
          items:
            $ref: '#/components/schemas/DataRequirement'
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación del template de consentimiento
          example: '2024-03-20T15:30:00Z'
        updated_at:
          type: string
          format: date-time
          description: Fecha y hora de la última actualización del template de consentimiento
          example: '2024-03-20T15:30:00Z'
    ConsentTemplateList:
      type: object
      properties:
        consent_templates:
          type: array
          items:
            $ref: '#/components/schemas/ConsentTemplate'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    DataRequirementInput:
      type: object
      required:
        - key
        - data_uses
      properties:
        key:
          type: string
          description: Clave del dato. Es un texto libre que identifica específicamente el dato involucrado en el consentimiento.
          example: first_name
        data_category:
          type: string
          description: |
            Categoría del dato personal. Debe seguir la [taxonomía de categorías de datos](/docs/integration-guide/concepts/agreement/#taxonomía).

            Las siguientes llaves (`key`) infieren la categoría del dato personal:

            --------------------

              - `name`: Primer nombre (**Name > First**)
              - `last_name`: Apellido (**Name > Last**)
              - `date_of_birth`: Fecha de nacimiento (**Demographic > Birth date**)
              - `cl_carnet_rut`: RUT (**Government Id > National Identification Number**)
              - `cl_carnet_doc_number`: Número de documento (**Government Id**)
              - `cl_carnet_expiration_date`: Fecha de expiración del documento (**Government Id**)
              - `cl_carnet_issue_date`: Fecha de emisión del documento (**Government Id**)
              - `gender`: Género (**Demographic > Gender**)
              - `nationality`: Nacionalidad (**Demographic**)
              - `email`: Correo electrónico (**Contact > Email**)
              - `phone_number`: Teléfono (**Contact > Phone number**)

            --------------------

            Esto significa que si se utiliza alguna de estas llaves, no es necesario especificar la categoría del dato.

            Si se especifica una de estas llaves y además se especifica la categoría del dato, la categoría dada tendrá prioridad sobre la predefinida.
          example: user.name.first
        data_uses:
          type: array
          description: 'Lista de usos permitidos para el dato, parte de la taxonomía de usos de datos'
          items:
            type: string
    DataRequirement:
      type: object
      x-tags:
        - Consent templates
      properties:
        key:
          type: string
          description: Clave del dato. Es un texto libre que identifica específicamente el dato involucrado en el consentimiento.
          example: first_name
        data_category:
          type: string
          description: 'Categoría del dato según Fideslang. Ver [taxonomía](/docs/integration-guide/concepts/taxonomy-and-data-management)'
          example: user.name.first
        data_uses:
          type: array
          description: 'Lista de finalidades de tratamiento según Fideslang. Ver [taxonomía](/docs/integration-guide/concepts/taxonomy-and-data-management)'
          items:
            type: string
    DisclosureRequestList:
      type: object
      properties:
        disclosure_requests:
          type: array
          items:
            $ref: '#/components/schemas/DisclosureRequest'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    IdentityList:
      type: object
      properties:
        identities:
          type: array
          items:
            $ref: '#/components/schemas/Identity'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    ValidationAttemptList:
      type: object
      properties:
        validation_attempts:
          type: array
          items:
            $ref: '#/components/schemas/ValidationAttempt'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    AuthAttemptList:
      type: object
      properties:
        auth_attempts:
          type: array
          items:
            $ref: '#/components/schemas/AuthAttempt'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    SignatureAttemptList:
      type: object
      properties:
        signature_attempts:
          type: array
          items:
            $ref: '#/components/schemas/SignatureAttempt'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    EventList:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    SignedDocumentList:
      type: object
      properties:
        signed_documents:
          type: array
          items:
            $ref: '#/components/schemas/SignedDocument'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    DisclosureRequest:
      description: |
        Representa una solicitud de divulgación de datos en el sistema. Este proceso integral incluye:
        - Verificación de identidad del usuario
        - Registro del consentimiento
        - Revelación de datos hacia la empresa solicitante

        El proceso comienza con la entrega de consentimiento, donde el usuario verá los datos solicitados y deberá confirmar
        su consentimiento. Luego, verificará su identidad y al completar este paso, se creará una identidad con los datos
        verificados.

        ### Guias relacionadas
        - [Revelación de datos y consentimiento](/docs/integration-guide/modules/disclosure)
        - [Verificación de identidad](/docs/integration-guide/concepts/verification)
      x-tags:
        - Disclosure requests
      type: object
      properties:
        id:
          type: string
          description: Identificador único del disclosure request.
          example: dreq_1B2M2Y8AsgTpgAmY7PhCfg
        disclosure_template_id:
          type: string
          description: Identificador del template de divulgación.
          example: dtpl_3D4O4A0CuiVriCnA9RjEhi
        identity_id:
          type: string
          description: Identificador únicode la identidad.
          example: id_ma21KLsmaslopask912Aa2
        status:
          type: string
          description: Estado de la solicitud de divulgación.
          enum:
            - pending
            - authenticating
            - validating
            - awaiting_permissions
            - awaiting_missing_data
            - timed_out
            - granted
          example: pending
        matchers:
          type: array
          description: Matchers de la solicitud de divulgación.
          items:
            type: object
            properties:
              key:
                type: string
                description: Clave del matcher.
                example: cl_carnet_rut
              value:
                type: string
                description: Valor del matcher.
                example: 12345678-9
        sdk:
          type: string
          description: SDK utilizado para iniciar la solicitud.
          example: web
        user_reference:
          type: string
          description: Referencia de usuario de tu sistema para el disclosure request.
          example: user_123
        identity_email:
          type: string
          description: Correo electrónico proveído por el comercio a la hora de crear la solicitud de divulgación.
          example: walter@white.com
        created_at:
          type: string
          format: date-time
          description: Fecha y hora en que se creó el disclosure request.
          example: '2024-03-20T15:30:00Z'
    AuthRequest:
      x-tags:
        - Auth requests
      type: object
      description: |
        Los auth requests son una forma de autenticar a identidades previamente validadas a través de un `disclosure_request`.

        ### Guias relacionadas
        - [Conceptos Generales](/docs/integration-guide/concepts/general-concepts)
      properties:
        id:
          type: string
          description: Identificador único del request de autenticación.
          example: authreq_Kop19_kEe23i7hSw8QG4-a
        identity_id:
          type: string
          description: Identificador de la identidad que realiza el intento.
          example: id_ma21KLsmaslopask912Aa2
        status:
          type: string
          enum:
            - awaiting_authentication
            - successful
            - timed_out
          description: Estado actual del request de autenticación.
        user_reference:
          type: string
          description: Referencia de usuario de tu sistema para el request de autenticación.
          example: user_123
        created_at:
          type: string
          format: date-time
          description: Fecha y hora en que se creó el registro del intento de autenticación.
    AuthRequestList:
      type: object
      properties:
        auth_requests:
          type: array
          items:
            $ref: '#/components/schemas/AuthRequest'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    IdentityInformation:
      type: object
      description: Información detallada de un atributo específico de una identidad.
      properties:
        key:
          type: string
          description: Clave o nombre del atributo de la identidad.
          example: name
        value:
          type: string
          description: Valor asociado a la clave del atributo.
          example: Jon
      xml:
        name: tag
    Identity:
      x-tags:
        - Identities
      type: object
      description: |
        Los objetos de identidad permiten gestionar los datos de identidad de tus usuarios.
        Una identidad representa a un usuario verificado en el sistema y contiene toda la información
        validada sobre esa persona.

        ### Guias relacionadas
        - [Conceptos Generales](/docs/integration-guide/concepts/general-concepts)
      properties:
        id:
          type: string
          description: Identificador único de la identidad.
          example: id_ma21KLsmaslopask912Aa2
        email:
          type: string
          description: Correo electrónico asociado a la identidad.
          example: jonsnow@nightswatch.com
        data:
          type: array
          description: Colección de información adicional sobre la identidad en forma de pares clave-valor.
          items:
            $ref: '#/components/schemas/IdentityInformation'
        signed_documents:
          type: array
          description: Lista de todos los `ids` de los documentos firmados por la identidad.
          items:
            type: string
            description: Identificador único del documento firmado.
            example: sd_1B2M2Y8AsgTpgAmY7PhCfg
    AuthAttempt:
      x-tags:
        - Auth attempts
      type: object
      description: |
        Los intentos de autenticación representan movimientos de una identidad al intentar autenticarse con tu sistema.

        El tipo de autenticación dependerá del registro del dispositivo de autenticación del usuario. En el caso de que un usuario
        no tenga su dispositivo de autenticación registrado, el tipo de validación será facial. En ese momento se le pedirá
        registrar el dispositivo.

        **Guias relacionadas**:
        - [Autenticación de usuarios](/docs/integration-guide/modules/authentication)
        - [Verificación de identidad](/docs/integration-guide/concepts/verification)
      properties:
        id:
          type: string
          description: Identificador único del intento de autenticación.
          example: aa_Kop19_kEe23i7hSw8QG4-a
        identity_id:
          type: string
          description: Identificador de la identidad que realiza el intento.
          example: id_ma21KLsmaslopask912Aa2
        status:
          type: string
          enum:
            - awaiting_authentication
            - authenticating_by_video
            - failed
            - successful
          description: 'Estado actual del intento de autenticación (por ejemplo, "exitoso", "fallido").'
        user_reference:
          type: string
          description: Referencia de usuario de tu sistema para el intento de autenticación.
          example: user_123
        kind:
          type: string
          enum:
            - facial_validation
            - passkey_validation
          description: Tipo de validación utilizada en el intento de autenticación. `passkey_validation` corresponde a cuando un usuario validó a través de un dispositivo registrado.
        error_reason:
          type:
            - 'null'
            - string
          description: Razón del error en caso de que el intento haya fallado. Campo opcional.
        created_at:
          type: string
          format: date-time
          description: Fecha y hora en que se creó el registro del intento de autenticación.
    SignatureAttempt:
      x-tags:
        - Signature attempts
      type: object
      description: |
        Representan los intentos de los usuarios para firmar ciertos documentos, los cuales dependen del SignatureAttemptTemplate.
        La firma puede realizarse por medio de llaves de acceso para cuando el usuario haya registrado una, o por medio de video
        facial cuando el usuario por alguna razón no puede usar la llave de acceso.

        ### Guias relacionadas
        - [Solicitudes de firma de documentos](/docs/integration-guide/modules/signature)
        - [Firma de documentos](/docs/integration-guide/concepts/signature)
      properties:
        id:
          type: string
          description: Identificador único del intento de firma.
          example: sa_1B2M2Y8AsgTpgAmY7PhCfg
        identity_id:
          type: string
          description: Identificador de la identidad que realiza el intento.
          example: id_ma21KLsmaslopask912Aa2
        status:
          type: string
          enum:
            - pending
            - authenticating
            - creating_signed_documents
            - successful
          description: Estado actual del intento de firma.
        user_reference:
          type: string
          description: Referencia de usuario de tu sistema para el intento de firma.
          example: user_123
        auth_type:
          type: string
          enum:
            - passkey_validation
            - facial_validation
          description: Tipo de autenticación utilizada en el intento de firma. `passkey_validation` corresponde a cuando un usuario validó a través de una llave de acceso.
        created_at:
          type: string
          format: date-time
          description: Fecha y hora en que se creó el registro del intento de autenticación.
    ValidationAttempt:
      x-tags:
        - Validation attempts
      type: object
      description: |
        Los intentos de validación representan los procesos de validación de identidades de los usuarios.
        Estos obedecen a una serie de reglas de validación representadas por un template de validación.

        ### Guias relacionadas
        - [Revelación de datos y consentimiento](/docs/integration-guide/modules/disclosure)
        - [Verificación de identidad](/docs/integration-guide/concepts/verification)
      properties:
        id:
          type: string
          description: Identificador único del flujo de validación.
          example: va_1B2M2Y8AsgTpgAmY7PhCfg
        identity_email:
          type: string
          description: Correo electrónico de la identidad asociada al flujo.
          example: gus@polloshermanos.com
        status:
          type: string
          enum:
            - pending
            - in_progress
            - successful
            - failed
          description: Estado actual del flujo de validación.
        user_reference:
          type:
            - string
            - 'null'
          description: Referencia de usuario de tu sistema para el flujo de validación.
          example: user_123
        error_reason:
          type:
            - 'null'
            - string
          enum:
            - unknown_error
            - document_validation_error
            - facial_validation_error
            - expiration_error
          description: 'Motivo del error, si el flujo no fue exitoso. Campo opcional.'
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación del flujo de validación.
    ConsentCommit:
      x-tags:
        - Consent commits
      type: object
      description: Agrupa una serie de acciones de consentimiento realizadas por un usuario
      properties:
        id:
          type: string
          description: Identificador único del consent commit
          example: ccom_1B2M2Y8AsgTpgAmY7PhCfg
        user_reference:
          type: string
          description: Referencia del usuario en el sistema del cliente
          example: user_123
        entity_id:
          type: string
          description: Identificador de la entidad asociada
          example: ent_1B2M2Y8AsgTpgAmY7PhCfg
        consent_actions:
          type: array
          description: Acciones de consentimiento asociadas al commit
          items:
            $ref: '#/components/schemas/ConsentAction'
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación del consent commit
          example: '2024-03-20T15:30:00Z'
    ConsentAction:
      x-tags:
        - Consent actions
      type: object
      description: Representa una acción de consentimiento realizada por un usuario
      properties:
        id:
          type: string
          description: Identificador único de la acción de consentimiento
          example: consact_1B2M2Y8AsgTpgAmY7PhCfg
        entity_id:
          type: string
          description: Identificador de la entidad asociada. Puede ser nulo.
          example: ent_5F6Q6C2EwkXtkEpB1TlGjk
          nullable: true
        user_reference:
          type: string
          description: Referencia del usuario en el sistema del cliente
          example: user_123
        consent_template_id:
          type: string
          description: Identificador del template de consentimiento asociado.
          example: ctmpl_1B2M2Y8AsgTpgAmY7PhCfg
        context:
          type: string
          description: Contexto adicional asociado a la acción de consentimiento
          example: web_signup
          nullable: true
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación de la acción de consentimiento
          example: '2024-03-20T15:30:00Z'
    Event:
      x-tags:
        - Events
      type: object
      description: |
        Los eventos nos permiten comunicarte cambios relevantes en el sistema. Cuando ocurre un evento interesante,
        se crea un objeto evento. Por ejemplo, cuando se valida una identidad, se crea un evento `validation_attempt.succeeded`;
        cuando una validación falla, se crea un objeto `validation_attempt.failed`.

        :::info
        Una llamada a la API **puede generar 1 o más eventos**.
        :::

        Los eventos pueden ser enviados directamente a tu servidor a través de la utilización de webhooks.

        ### Guias relacionadas
        - [Webhooks](/docs/api/webhooks)
      properties:
        id:
          type: string
          description: Identificador único del evento.
          example: evt_1B2M2Y8AsgTpgAmY7PhCfg
        name:
          type: string
          description: Nombre descriptivo del evento.
          example: disclosure_request.granted
        payload:
          type: object
          description: Datos adicionales asociados al evento.
          example:
            disclosure_request_id: dreq_1B2M2Y8AsgTpgAmY7PhCfg
            identity_id: id_ma21KLsmaslopask912Aa2
            user_reference: user_123
        created_at:
          type: string
          format: date-time
          description: Fecha y hora en que se registró el evento.
          example: '2024-03-20T15:30:00Z'
    SignedDocument:
      x-tags:
        - Signed documents
      type: object
      description: |
        Los documentos firmados son documentos digitales que han sido autenticados por los usuarios mediante su firma electrónica.
        Estos documentos pueden incluir contratos, acuerdos legales, y otros documentos importantes que requieren confirmación
        de identidad y consentimiento explícito del usuario.

        La firma de estos documentos se gestiona a través del modelo `SignatureAttempt`, que verifica la identidad del usuario
        y asegura que la firma sea válida y segura.

        ### Guias relacionadas
        - [Solicitudes de firma de documentos](/docs/integration-guide/modules/signature)
      properties:
        id:
          type: string
          description: Identificador único del documento firmado.
          example: sd_1B2M2Y8AsgTpgAmY7PhCfg
        identity_id:
          type: string
          description: Identificador de la identidad participante en la firma.
          example: id_ma21KLsmaslopask912Aa2
        created_at:
          type: string
          format: date-time
          description: Fecha y hora en que se registró el documento firmado.
          example: '2024-03-20T15:30:00Z'
    AgreementBase:
      type: object
      description: Representa la estructura básica de un acuerdo para listados
      properties:
        id:
          type: string
          description: Identificador único del acuerdo.
          example: agr_IdBeyWCa1ENLUYnPRLpCUg
        version:
          type: integer
          description: Versión del acuerdo
          example: 1
        subject_id:
          type: string
          description: Identificador único del usuario del acuerdo. Puede corresponder al identificador de un `Identity` o `Entity`. El `subject_type` indica el tipo del usuario en cuestión.
          example: ent_ma21KLsmaslopask912Aa2
        subject_type:
          type: string
          description: Tipo de sujeto del acuerdo. Puede ser `Identity` o `Entity`.
          example: Entity
        data:
          type: array
          description: Datos procesados del agreement de acuerdo a la taxonomía de datos
          items:
            $ref: '#/components/schemas/ProcessedDatum'
        user_reference:
          type: string
          description: Referencia de usuario proporcionada por el cliente.
          example: user_123
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación del acuerdo.
          example: '2024-11-21T14:54:57.167Z'
    AgreementDetail:
      x-tags:
        - Agreements
      type: object
      title: Agreement
      description: |
        Representa el estado actual de los permisos de un usuario para utilizar datos de acuerdo a la taxonomía de datos y usos de datos.
        Puede ser actualizado a través de distintas acciones del usuario y empresa en el tiempo.

        :::info
        Para más detalles, revisa nuestra sección de [Agreements y evidencia](/docs/integration-guide/concepts/agreement.mdx).
        :::
      allOf:
        - $ref: '#/components/schemas/AgreementBase'
        - type: object
          properties:
            previous_evidence_ids:
              type: array
              description: IDs de evidencias anteriores relacionadas con este acuerdo
              items:
                type: string
              example:
                - evd_pNMroI2OEfrDNdi8xT6kOQ
            subject_id:
              type: string
              description: Identificador único del usuario del acuerdo. Puede corresponder al identificador de un `Identity` o `Entity`. El `subject_type` indica el tipo del usuario en cuestión.
              example: ent_ma21KLsmaslopask912Aa2
            subject_type:
              type: string
              description: Tipo de sujeto del acuerdo. Puede ser `Identity` o `Entity`.
              example: Entity
            source_type:
              type: string
              description: Fuente del acuerdo. Puede ser `DisclosureRequest` o `ConsentAction`.
              example: DisclosureRequest
            data:
              type: array
              description: Datos específicos del acuerdo y sus usos permitidos
              items:
                $ref: '#/components/schemas/ProcessedDatum'
    AgreementList:
      type: object
      properties:
        agreements:
          type: array
          items:
            $ref: '#/components/schemas/AgreementBase'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    Evidence:
      x-tags:
        - Agreements
      type: object
      description: Representa una evidencia que respalda un consentimiento o acuerdo.
      properties:
        id:
          type: string
          description: Identificador único de la evidencia.
          example: evd_wCntp5aXB5q7fKSthevwrw
        integrity_hash:
          type: string
          description: Hash criptográfico que garantiza la integridad de la evidencia.
          example: 28b0f934...
        consent_method:
          type: object
          description: Información sobre el método de consentimiento utilizado.
          properties:
            category:
              type: string
              description: Categoría del método de consentimiento.
              example: opt-in click
            channel:
              type: string
              description: Canal a través del cual se obtuvo el consentimiento.
              example: website
            details:
              type: string
              description: Detalles específicos sobre cómo se obtuvo el consentimiento.
              example: cliked in selector tab to opt-in consent
            facilitator:
              type: string
              description: Entidad que facilitó el proceso de consentimiento.
              example: soyio
        identification_method:
          type: object
          description: Información sobre el método de identificación utilizado.
          properties:
            data_subject_id:
              type: string
              description: ID del sujeto de datos identificado.
              example: id_ftKAfJCmbmGe1t2X1Kt3gw
            type:
              type: string
              description: Tipo de método de identificación utilizado.
              example: soyio.validation
            type_reference:
              type: string
              description: Referencia al proceso de identificación específico.
              example: va_Pwj5xTQYQ4vciUZPqnVTdg
        contextual_data:
          type: object
          description: Datos contextuales del momento del consentimiento.
          properties:
            ip:
              type: string
              description: Dirección IP desde donde se realizó la acción.
              example: 192.168.65.1
            user_agent:
              type: string
              description: User agent del navegador utilizado.
              example: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36'
        agreement_change:
          type: object
          description: Información sobre el cambio en el acuerdo.
          properties:
            action:
              type: string
              description: Tipo de acción realizada sobre el acuerdo.
              example: grant
        event_logs:
          type: array
          description: Registro cronológico de eventos relacionados con la evidencia.
          items:
            type: object
            properties:
              description:
                type: string
                description: Descripción del evento.
                example: Disclosure request was created
              timestamp:
                type: string
                format: date-time
                description: Fecha y hora del evento.
                example: '2024-11-21T14:54:29.802Z'
              type:
                type: string
                description: Tipo de evento.
                example: disclosure_created
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación de la evidencia.
          example: '2024-11-21T14:54:57.202Z'
    ProcessedDatum:
      type: object
      description: Representa un dato procesado de acuerdo a la taxonomía de datos.
      properties:
        key:
          type: string
          description: Identificador del dato
          example: name
        data_category:
          type: string
          description: 'Categoría del dato personal. Sigue la taxonomía de datos. Para más información, consulta [el detalle de la taxonomía](/docs/integration-guide/concepts/taxonomy-and-data-management)'
          example: user.name.first
        data_uses:
          type: array
          description: Usos permitidos para este dato
          items:
            $ref: '#/components/schemas/DataUse'
        scope:
          type: object
          description: Alcance del uso del dato procesado.
          $ref: '#/components/schemas/ProcessedDatumScope'
    ProcessedDatumScope:
      type: object
      description: 'Alcance del uso del dato procesado. Si es un objeto vacío, significa que no está asociado a un producto o filial específica de la empresa.'
      properties:
        product:
          type: string
          description: Identificador del producto o servicio para el cuál está vigente el uso del dato.
        branch:
          type: string
          description: Identificador de la filial de tu empresa para la cual está vigente el uso del dato.
    DataUse:
      x-tags:
        - Agreements
      type: object
      description: Representa el uso específico de un dato.
      properties:
        use:
          type: string
          description: 'Propósito específico del uso del dato. Sigue la taxonomía de usos de datos. Para más información, consulta [el detalle de la taxonomía](/docs/integration-guide/concepts/agreement#taxonomía)'
          example: essential.service.authentication
        expires_at:
          type: string
          format: date
          description: Fecha de expiración del permiso de uso
          example: '2034-12-06'
        document_references:
          type: array
          description: Referencias a documentos relacionados
          items:
            type: string
          example:
            - 669823ed4c91e6af2537f984
            - 66b103a5d2e10ef171a9004b
    EvidenceList:
      type: object
      properties:
        evidences:
          type: array
          items:
            $ref: '#/components/schemas/Evidence'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    PrivacyDocument:
      type: object
      x-tags:
        - Privacy documents
      description: |
        Los documentos de privacidad son configuraciones que permiten gestionar documentos legales como términos y condiciones o políticas de privacidad. Estos documentos pueden ser referenciados desde distintos templates usando su `template_key`.
      properties:
        id:
          type: string
          description: Identificador único. Debe empezar con `privdoc_`
          example: privdoc_jy21JCGqb-VHhHeUd2nmKw
        name:
          type: string
          description: Texto que se mostrará al usuario
          example: términos y condiciones
        template_key:
          type: string
          description: Identificador para referenciar el documento
          example: terms_and_conditions
        url:
          type: string
          description: URL para acceder al documento
          example: /download_url
    PrivacyDocumentList:
      type: object
      properties:
        privacy_documents:
          type: array
          items:
            $ref: '#/components/schemas/PrivacyDocument'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    ApiResponse:
      type: object
      description: Respuesta estándar para las operaciones de la API que incluyen código y mensaje de estado.
      properties:
        code:
          type: integer
          format: int32
          description: Código numérico que representa el estado de la respuesta.
          example: 200
        type:
          type: string
          description: 'Tipo de mensaje de la respuesta, por ejemplo, "error" o "success".'
          example: success
        message:
          type: string
          description: Mensaje descriptivo acerca del resultado de la operación.
          example: Operación completada exitosamente
      xml:
        name: '##default'
    Webhook:
      x-tags:
        - Webhooks
      type: object
      description: |
        Los webhooks son endpoints HTTP que reciben notificaciones cuando ocurren eventos en el sistema.
        Cada webhook puede estar suscrito a uno o más tipos de eventos.
      properties:
        id:
          type: string
          description: Identificador único del webhook
          example: wh_1B2M2Y8AsgTpgAmY7PhCfg
        name:
          type: string
          description: Nombre del webhook
          example: My Webhook
        status:
          type: string
          enum:
            - ok
            - failing
          description: 'Estado del webhook. Si el webhook ha fallado en las últimas 24 horas, el estado será `failing`.'
          example: ok
        last_failure_at:
          type: string
          format: date-time
          description: Fecha y hora de la última falla del webhook.
          example: '2024-03-20T15:30:00Z'
        url:
          type: string
          description: URL donde se enviarán los eventos
          example: 'https://company.com/your-webhook-endpoint'
        secret_key:
          type: string
          description: Clave secreta para verificar la integridad del webhook.
          example: WHzBRgmn6jC1lm377I70mxiCmyRTON+QeH739YF/oXs=
        subscriptions:
          type: array
          description: |
            Lista de eventos a los que está suscrito el webhook. Los eventos disponibles están detallados junto a cada recurso bajo la etiqueta `EVENT`.

            **TIP**:
            Puedes suscribirte a todos los eventos de un recurso específico usando el wildcard `*`.
            Por ejemplo, para suscribirte a todos los eventos de los `disclosure_request`, puedes suscribirte a `disclosure_request.*`.
          items:
            type: string
          example:
            - '*'
            - auth_attempt.*
            - validation_attempt.*
        enabled_modes:
          type: array
          description: Lista de modos en los que el webhook está habilitado
          items:
            type: string
          example:
            - production
            - sandbox
        enabled:
          type: boolean
          description: Indica si el webhook está habilitado o no
          example: true
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación del webhook
          example: '2024-03-20T15:30:00Z'
        updated_at:
          type: string
          format: date-time
          description: Fecha y hora de la última actualización del webhook
          example: '2024-03-20T15:30:00Z'
    WebhookList:
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    WebhookTransaction:
      x-tags:
        - WebhooksTransactions
      type: object
      description: Representa una transacción o intento de entrega de un evento a un webhook.
      properties:
        id:
          type: string
          description: Identificador único de la transacción del webhook (token).
          example: whtx_1B2M2Y8AsgTpgAmY7PhCde
        event_id:
          type: string
          description: Identificador único del evento que generó esta transacción.
          example: evt_1B2M2Y8AsgTpgAmY7PhCgf
        event_name:
          type: string
          description: Nombre del evento que generó esta transacción.
          example: agreement.created
        response_code:
          type: integer
          description: Código de respuesta HTTP recibido del endpoint del webhook.
          example: 200
        response_body:
          type: string
          description: Cuerpo de la respuesta recibida del endpoint del webhook.
          example: '{"status": "received"}'
        response_headers:
          type: object
          description: Cabeceras de la respuesta recibida del endpoint del webhook.
          additionalProperties:
            type: string
          example:
            Content-Type: application/json
            X-Request-ID: 12345f-abc-6789
        successful:
          type: boolean
          description: Indica si la entrega del evento fue exitosa.
          example: true
        error_message:
          type: string
          nullable: true
          description: Mensaje de error en caso de que la entrega haya fallado.
          example: Connection timed out
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación de la transacción del webhook.
          example: '2024-03-21T10:00:00Z'
    WebhookTransactionList:
      type: object
      properties:
        webhook_transactions:
          type: array
          items:
            $ref: '#/components/schemas/WebhookTransaction'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    Product:
      x-tags:
        - Products
      type: object
      description: |
        Diferentes productos o servicios que ofrece tu compañía.
      properties:
        id:
          type: string
          description: ID único del producto. Se recomienda darle un identificador con un formato que facilite su identificación.
          example: my_product_123
    DSRQueryRequestDetail:
      type: object
      description: 'Detalle de solicitud para consultas (access, portability)'
      required:
        - kind
      properties:
        kind:
          type: string
          enum:
            - all
            - specific
          description: Tipo de solicitud de consulta.
          example: all
        data_categories:
          type: array
          items:
            type: string
          description: |
            Categorías de datos a solicitar. Requerido cuando kind es 'specific'.
            Debe ser una categoría válida de la taxonomía o 'other'.
          example:
            - user.name
            - user.contact.email
        detail:
          type: string
          description: Detalle adicional de la solicitud.
          example: Solicitud de acceso a datos personales
    DSRMutationRequestDetail:
      type: object
      description: 'Detalle de solicitud para modificaciones (rectification, opposition, suppression)'
      required:
        - requested_fields
      properties:
        requested_fields:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/DSRRequestedField'
          description: Campos específicos que se solicita modificar
    DSRRequestedField:
      type: object
      required:
        - data_category
        - detail
      properties:
        data_category:
          type: string
          description: |
            Categoría de datos según taxonomía válida o 'all'.
            Debe ser una categoría válida de la taxonomía.
          example: user.name
        detail:
          type: string
          description: Detalle específico del campo solicitado.
          example: Corrección de fecha de nacimiento
        file_data:
          type: object
          description: Datos del archivo adjunto (si aplica)
          additionalProperties: true
    DataSubjectRequest:
      x-tags:
        - Data subject requests
      type: object
      description: |
        Representan las solicitudes de ejercicio de derechos de los usuarios.

        ### Guías relacionadas

        - [Gestor de privacidad](/docs/integration-guide/modules/privacy-manager)
      required:
        - kind
        - contact_information
        - request_detail
      properties:
        id:
          type: string
          description: Identificador único del data subject request. Debe empezar con `dsreq_`
          example: dsreq_1B2M2Y8AsgTpgAmY7PhCfg
        humanized_identifier:
          type: string
          description: Identificador de la solicitud.
          example: FME4607
        subject_id:
          type: string
          description: Identificador único del sujeto de datos que se está modificando. Puede corresponder al identificador de un `Identity` o `Entity`.
          example: ent_1B2M2Y8AsgTpgAmY7PhCfg
        user_reference:
          type: string
          description: Referencia del usuario en el sistema del cliente.
          example: user_123
        kind:
          type: string
          enum:
            - access
            - rectification
            - opposition
            - suppression
            - portability
          description: Tipo de solicitud.
          example: access
        status:
          type: string
          enum:
            - awaiting_verification
            - validating
            - processing
            - completed
            - rejected
            - data_missmatch
          description: Estado actual de la solicitud.
          example: awaiting_verification
        data_usage_during_request:
          type: string
          enum:
            - block
            - allow
          description: 'Indica si el uso de datos durante la solicitud está permitido o no. Solo es requerido para las solicitudes de tipo `rectification`, `opposition` y `suppression`.'
          example: block
        rejection_reason:
          type: string
          description: Razón de rechazo si la solicitud fue rechazada.
          example: Documentación insuficiente
        contact_information:
          type: object
          required:
            - nin
            - email
            - names
            - last_names
          properties:
            nin:
              type: string
              description: Número de identificación del usuario.
              example: '123456789'
            email:
              type: string
              format: email
              description: Email del usuario. Este email será el que se usará para enviar la confirmación de la solicitud.
              example: user@example.com
            names:
              type: string
              description: Nombres del usuario.
              example: Juan Carlos
            last_names:
              type: string
              description: Apellidos del usuario.
              example: Pérez Gómez
        request_detail:
          oneOf:
            - $ref: '#/components/schemas/DSRQueryRequestDetail'
            - $ref: '#/components/schemas/DSRMutationRequestDetail'
        workflow_run_id:
          type: string
          description: ID del workflow run asociado a la solicitud.
          example: wfr_1B2M2Y8AsgTpgAmY7PhCfg
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación de la solicitud.
          example: '2024-03-20T15:30:00Z'
        updated_at:
          type: string
          format: date-time
          description: Fecha y hora de la última actualización de la solicitud.
          example: '2024-03-20T15:30:00Z'
    DataSubjectRequestCreate:
      type: object
      description: |
        Datos para crear un data subject request.
      required:
        - kind
        - contact_information
        - request_detail
      properties:
        subject_id:
          type: string
          description: ID del sujeto de datos que se está modificando.
          example: subj_1B2M2Y8AsgTpgAmY7PhCfg
        user_reference:
          type: string
          description: Referencia del usuario en el sistema del cliente.
          example: user_123
        kind:
          type: string
          enum:
            - access
            - rectification
            - opposition
            - suppression
            - portability
          description: Tipo de solicitud.
          example: access
        data_usage_during_request:
          type: string
          enum:
            - block
            - allow
          description: 'Solo es requerido para las solicitudes de tipo `rectification`, `opposition` y `suppression`.'
          example: block
        contact_information:
          type: object
          required:
            - nin
            - email
            - names
            - last_names
          properties:
            nin:
              type: string
              description: Número de identificación del usuario.
              example: '123456789'
            email:
              type: string
              format: email
              description: Email del usuario.
              example: user@example.com
            names:
              type: string
              description: Nombres del usuario.
              example: Juan Carlos
            last_names:
              type: string
              description: Apellidos del usuario.
              example: Pérez Gómez
        request_detail:
          oneOf:
            - $ref: '#/components/schemas/DSRQueryRequestDetail'
            - $ref: '#/components/schemas/DSRMutationRequestDetail'
    DataSubjectRequestList:
      type: object
      properties:
        data_subject_requests:
          type: array
          items:
            $ref: '#/components/schemas/DataSubjectRequest'
        metadata:
          $ref: '#/components/schemas/FilterOrderAndPaginationMetadata'
    ValidationError:
      type: object
      required:
        - type
        - title
        - status
        - errors
      properties:
        type:
          type: string
          example: validation_error
        title:
          type: string
          example: Validation error
        status:
          type: integer
          example: 422
        errors:
          type: array
          items:
            type: string
    Entity:
      x-tags:
        - Entities
      type: object
      description: |
        Los objetos de Entidad permiten asociar los consentimientos de tus usuarios a un objeto. Una entidad representa a un usuario **no verificado** en el sistema, a diferencia de una identidad.
      properties:
        id:
          type: string
          description: ID único de la entidad.
          example: ent_1B2M2Y8AsgTpgAmY7PhCfg
    ComplianceStatus:
      x-tags:
        - Entities
      type: object
      description: Estado del cumplimiento de una entidad respecto a un template de consentimiento específico. Considera el último estado del agreement para evaluar si es que cumple o no cumple.
      properties:
        status:
          type: string
          enum:
            - compliant
            - non_compliant
            - partially_compliant
          description: |
            El cumplimiento en sí:
            - `compliant`: La entidad cumple con **todos** los `data_requirements`s del template de consentimiento.
            - `non_compliant`: La entidad no cumple con **ningún** `data_requirement`s del template de consentimiento.
            - `partially_compliant`: La entidad cumple **solo con algunos** de los `data_requirements`s del template de consentimiento.
          example: compliant
        consent_template_id:
          type: string
          description: ID del template de consentimiento al cuál corresponde el cumplimiento
          example: constpl_1B2M2Y8AsgTpgAmY7PhCfg
        last_consent_action_id:
          type: string
          description: ID de la última acción de consentimiento asociada al template y esa entidad.
          example: consact_1B2M2Y8AsgTpgAmY7PhCfg
        agreement_id:
          type: string
          description: 'ID del agreement, para ir a buscar más información sobre el cumplimiento.'
          example: agreement_1B2M2Y8AsgTpgAmY7PhCfg
    NotFoundErrorSchema:
      type: object
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          type: string
          example: invalid_request_error
        title:
          type: string
          example: Resource not found
        status:
          type: integer
          example: 404
        detail:
          type: string
          example: Couldn't find <resource> with id '<id>'. Please check your request and try again
    Configuration:
      type: object
      x-tags:
        - Company
      description: |
        Representa a los aspectos configurables de tu empresa, tales como canales de comunicación u otros datos relevantes.
      properties:
        alert_notification_email:
          type: string
          description: |
            Dirección de correo electrónico que recibirá alertas de eventos críticos en el sistema, por ejemplo, notificaciones sobre fallas de webhooks.
          example: alerts@example.com
        rights_contact_channels:
          type: object
          properties:
            email:
              type: string
              description: |
                Dirección de correo electrónico que tus usuarios pueden usar para ejercer sus derechos. Se muestra al momento de dar el consentimiento
              example: privacy@example.com
            manage_consent_url:
              type: string
              description: |
                URL del centro de privacidad de tu empresa, para que los usuarios puedan ejercer sus derechos y gestionar sus consentimientos. Se muestra al momento de dar el consentimiento y en caso de estar presente, reemplaza al correo electrónico.
              example: 'https://example.com/manage-consent'
  securitySchemes:
    api_key:
      type: apiKey
      description: Esquema de autenticación mediante una clave API proporcionada en el encabezado de las solicitudes.
      name: Authorization
      in: header
webhooks:
  agreementCreated:
    post:
      tags:
        - Agreements
      summary: Created
      operationId: agreementCreated
      description: |
        #### Nombre del evento: `agreement.created`.
        Se envía cuando se ha creado un nuevo acuerdo (agreement) en el sistema.
      requestBody:
        description: Contiene el recurso AgreementDetail actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - agreement.created
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos del acuerdo actualizado
                    - $ref: '#/components/schemas/AgreementDetail'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  agreementUpdated:
    post:
      tags:
        - Agreements
      summary: Updated
      operationId: agreementUpdated
      description: |
        #### Nombre del evento: `agreement.updated`.
        Se envía cuando un acuerdo (agreement) existente ha sido actualizado.
      requestBody:
        description: Contiene el recurso AgreementDetail actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - agreement.updated
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos del acuerdo actualizado
                    - $ref: '#/components/schemas/AgreementDetail'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  authAttemptSuccessful:
    post:
      tags:
        - Auth attempts
      summary: Successful
      operationId: authAttemptSuccessful
      description: |
        #### Nombre del evento: `auth_attempt.successful`.
        Se envía cuando un intento de autenticación se ha completado exitosamente.
      requestBody:
        description: Contiene el recurso AuthAttempt actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - auth_attempt.successful
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos del intento de autenticación actualizado
                    - $ref: '#/components/schemas/AuthAttempt'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  authAttemptFailed:
    post:
      tags:
        - Auth attempts
      summary: Failed
      operationId: authAttemptFailed
      description: |
        #### Nombre del evento: `auth_attempt.failed`.
        Se envía cuando un intento de autenticación ha fallado.
      requestBody:
        description: Contiene el recurso AuthAttempt actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - auth_attempt.failed
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos del intento de autenticación actualizado
                    - $ref: '#/components/schemas/AuthAttempt'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  authRequestSuccessful:
    post:
      tags:
        - Auth requests
      summary: Successful
      operationId: authRequestSuccessful
      description: |
        #### Nombre del evento: `auth_request.successful`.
        Se envía cuando un request de autenticación se ha completado exitosamente.
      requestBody:
        description: Contiene el recurso AuthRequest actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - auth_request.successful
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos del request de autenticación actualizado
                    - $ref: '#/components/schemas/AuthRequest'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  dataSubjectRequestCreated:
    post:
      tags:
        - Data subject requests
      summary: Created
      operationId: dataSubjectRequestCreated
      description: |
        #### Nombre del evento: `data_subject_request.created`.
        Se envía cuando se ha creado una nueva solicitud de ejercicio de derechos (`data subject request`).
      requestBody:
        description: Contiene el recurso DataSubjectRequest actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - data_subject_request.created
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos de la solicitud de derechos actualizada
                    - $ref: '#/components/schemas/DataSubjectRequest'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  dataSubjectRequestUpdated:
    post:
      tags:
        - Data subject requests
      summary: Updated
      operationId: dataSubjectRequestUpdated
      description: |
        #### Nombre del evento: `data_subject_request.updated`.
        Se envía cuando una solicitud de ejercicio de derechos (`data subject request`) existente ha sido actualizada.
      requestBody:
        description: Contiene el recurso DataSubjectRequest actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - data_subject_request.updated
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos de la solicitud de derechos actualizada
                    - $ref: '#/components/schemas/DataSubjectRequest'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  dataSubjectRequestValidating:
    post:
      tags:
        - Data subject requests
      summary: Validating
      operationId: dataSubjectRequestValidating
      description: |
        #### Nombre del evento: `data_subject_request.validating`.
        Se envía cuando una solicitud de ejercicio de derechos (`data subject request`) existente ha iniciado el proceso de validación.
      requestBody:
        description: Contiene el recurso DataSubjectRequest actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - data_subject_request.validating
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos de la solicitud de derechos actualizada
                    - $ref: '#/components/schemas/DataSubjectRequest'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  dataSubjectRequestProcessing:
    post:
      tags:
        - Data subject requests
      summary: Processing
      operationId: dataSubjectRequestProcessing
      description: |
        #### Nombre del evento: `data_subject_request.processing`.
        Se envía cuando una solicitud de ejercicio de derechos (`data subject request`) existente ha iniciado el proceso de procesamiento. Esto ocurre después de una validación exitosa.
      requestBody:
        description: Contiene el recurso DataSubjectRequest actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - data_subject_request.processing
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos de la solicitud de derechos actualizada
                    - $ref: '#/components/schemas/DataSubjectRequest'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  dataSubjectRequestCompleted:
    post:
      tags:
        - Data subject requests
      summary: Completed
      operationId: dataSubjectRequestCompleted
      description: |
        #### Nombre del evento: `data_subject_request.completed`.
        Se envía cuando una solicitud de ejercicio de derechos (`data subject request`) ha sido completada.
      requestBody:
        description: Contiene el recurso DataSubjectRequest actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - data_subject_request.completed
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos de la solicitud de derechos actualizada
                    - $ref: '#/components/schemas/DataSubjectRequest'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  dataSubjectRequestRejected:
    post:
      tags:
        - Data subject requests
      summary: Rejected
      operationId: dataSubjectRequestRejected
      description: |
        #### Nombre del evento: `data_subject_request.rejected`.
        Se envía cuando una solicitud de ejercicio de derechos (`data subject request`) ha sido rechazada.
      requestBody:
        description: Contiene el recurso DataSubjectRequest actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - data_subject_request.rejected
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos de la solicitud de derechos actualizada
                    - $ref: '#/components/schemas/DataSubjectRequest'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  dataSubjectRequestDataMissmatch:
    post:
      tags:
        - Data subject requests
      summary: Data missmatch
      operationId: dataSubjectRequestDataMissmatch
      description: |
        #### Nombre del evento: `data_subject_request.data_missmatch`.
        Se envía cuando una solicitud de ejercicio de derechos (`data subject request`) se completó, pero cuando se validó la identidad los datos no coinciden con los de la solicitud.
      requestBody:
        description: Contiene el recurso DataSubjectRequest actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - data_subject_request.data_missmatch
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos de la solicitud de derechos actualizada
                    - $ref: '#/components/schemas/DataSubjectRequest'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  disclosureRequestGranted:
    post:
      tags:
        - Disclosure requests
      summary: Granted
      operationId: disclosureRequestGranted
      description: |
        #### Nombre del evento: `disclosure_request.granted`.
        Se envía cuando un `disclosure_request` ha sido completado exitosamente y se ha otorgado acceso a los datos solicitados.
      requestBody:
        description: Contiene el recurso DisclosureRequest actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - disclosure_request.granted
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos del disclosure request actualizado
                    - $ref: '#/components/schemas/DisclosureRequest'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  disclosureRequestTimedOut:
    post:
      tags:
        - Disclosure requests
      summary: Timed out
      operationId: disclosureRequestTimedOut
      description: |
        #### Nombre del evento: `disclosure_request.timed_out`.
        Se envía cuando un `disclosure_request` ha expirado sin completarse.
      requestBody:
        description: Contiene el recurso DisclosureRequest actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - disclosure_request.timed_out
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos del disclosure request actualizado
                    - $ref: '#/components/schemas/DisclosureRequest'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  disclosureRequestFailed:
    post:
      tags:
        - Disclosure requests
      summary: Failed
      operationId: disclosureRequestFailed
      description: |
        #### Nombre del evento: `disclosure_request.failed`.
        Se envía cuando un `disclosure_request` ha fallado durante el proceso.
      requestBody:
        description: Contiene el recurso DisclosureRequest actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - disclosure_request.failed
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos del disclosure request actualizado
                    - $ref: '#/components/schemas/DisclosureRequest'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  signatureAttemptSuccessful:
    post:
      tags:
        - Signature attempts
      summary: Successful
      operationId: signatureAttemptSuccessful
      description: |
        #### Nombre del evento: `signature_attempt.successful`.
        Se envía cuando un intento de firma de documento se ha completado exitosamente.
      requestBody:
        description: Contiene el recurso SignatureAttempt actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - signature_attempt.successful
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos del intento de firma actualizado
                    - $ref: '#/components/schemas/SignatureAttempt'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  signatureAttemptFailed:
    post:
      tags:
        - Signature attempts
      summary: Failed
      operationId: signatureAttemptFailed
      description: |
        #### Nombre del evento: `signature_attempt.failed`.
        Se envía cuando un intento de firma de documento ha fallado.
      requestBody:
        description: Contiene el recurso SignatureAttempt actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - signature_attempt.failed
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos del intento de firma actualizado
                    - $ref: '#/components/schemas/SignatureAttempt'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
  validationAttemptFailed:
    post:
      tags:
        - Validation attempts
      summary: Failed
      operationId: validationAttemptFailed
      description: |
        #### Nombre del evento: `validation_attempt.failed`.
        Se envía cuando un intento de validación de identidad ha fallado.
      requestBody:
        description: Contiene el recurso ValidationAttempt actualizado. El payload corresponde al esquema completo del recurso.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID único del evento
                  example: evt_1B2M2Y8AsgTpgAmY7PhCfg
                name:
                  type: string
                  enum:
                    - validation_attempt.failed
                  description: Nombre del evento
                payload:
                  allOf:
                    - type: object
                      description: Datos del intento de validación actualizado
                    - $ref: '#/components/schemas/ValidationAttempt'
                created_at:
                  type: string
                  format: date-time
                  description: Fecha y hora de creación del evento
      responses:
        '200':
          description: Webhook recibido correctamente
        4XX:
          description: Error en el procesamiento del webhook
